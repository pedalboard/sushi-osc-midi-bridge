//* gRPC definitions for external control of sushi
//
// @copyright 2018 - 2022 Modern Ancient Instruments Networked AB, dba Elk, Stockholm

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: sushi_rpc.proto

package sushi_rpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ParameterType_Type int32

const (
	ParameterType_DUMMY ParameterType_Type = 0
	ParameterType_BOOL  ParameterType_Type = 1
	ParameterType_INT   ParameterType_Type = 2
	ParameterType_FLOAT ParameterType_Type = 3
)

// Enum value maps for ParameterType_Type.
var (
	ParameterType_Type_name = map[int32]string{
		0: "DUMMY",
		1: "BOOL",
		2: "INT",
		3: "FLOAT",
	}
	ParameterType_Type_value = map[string]int32{
		"DUMMY": 0,
		"BOOL":  1,
		"INT":   2,
		"FLOAT": 3,
	}
)

func (x ParameterType_Type) Enum() *ParameterType_Type {
	p := new(ParameterType_Type)
	*p = x
	return p
}

func (x ParameterType_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParameterType_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_sushi_rpc_proto_enumTypes[0].Descriptor()
}

func (ParameterType_Type) Type() protoreflect.EnumType {
	return &file_sushi_rpc_proto_enumTypes[0]
}

func (x ParameterType_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ParameterType_Type.Descriptor instead.
func (ParameterType_Type) EnumDescriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{12, 0}
}

type PlayingMode_Mode int32

const (
	PlayingMode_DUMMY     PlayingMode_Mode = 0
	PlayingMode_STOPPED   PlayingMode_Mode = 1
	PlayingMode_PLAYING   PlayingMode_Mode = 2
	PlayingMode_RECORDING PlayingMode_Mode = 3
)

// Enum value maps for PlayingMode_Mode.
var (
	PlayingMode_Mode_name = map[int32]string{
		0: "DUMMY",
		1: "STOPPED",
		2: "PLAYING",
		3: "RECORDING",
	}
	PlayingMode_Mode_value = map[string]int32{
		"DUMMY":     0,
		"STOPPED":   1,
		"PLAYING":   2,
		"RECORDING": 3,
	}
)

func (x PlayingMode_Mode) Enum() *PlayingMode_Mode {
	p := new(PlayingMode_Mode)
	*p = x
	return p
}

func (x PlayingMode_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayingMode_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_sushi_rpc_proto_enumTypes[1].Descriptor()
}

func (PlayingMode_Mode) Type() protoreflect.EnumType {
	return &file_sushi_rpc_proto_enumTypes[1]
}

func (x PlayingMode_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayingMode_Mode.Descriptor instead.
func (PlayingMode_Mode) EnumDescriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{13, 0}
}

type SyncMode_Mode int32

const (
	SyncMode_DUMMY    SyncMode_Mode = 0
	SyncMode_INTERNAL SyncMode_Mode = 1
	SyncMode_MIDI     SyncMode_Mode = 2
	SyncMode_LINK     SyncMode_Mode = 3
)

// Enum value maps for SyncMode_Mode.
var (
	SyncMode_Mode_name = map[int32]string{
		0: "DUMMY",
		1: "INTERNAL",
		2: "MIDI",
		3: "LINK",
	}
	SyncMode_Mode_value = map[string]int32{
		"DUMMY":    0,
		"INTERNAL": 1,
		"MIDI":     2,
		"LINK":     3,
	}
)

func (x SyncMode_Mode) Enum() *SyncMode_Mode {
	p := new(SyncMode_Mode)
	*p = x
	return p
}

func (x SyncMode_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SyncMode_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_sushi_rpc_proto_enumTypes[2].Descriptor()
}

func (SyncMode_Mode) Type() protoreflect.EnumType {
	return &file_sushi_rpc_proto_enumTypes[2]
}

func (x SyncMode_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SyncMode_Mode.Descriptor instead.
func (SyncMode_Mode) EnumDescriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{14, 0}
}

type TrackType_Type int32

const (
	TrackType_DUMMY   TrackType_Type = 0
	TrackType_REGULAR TrackType_Type = 1
	TrackType_PRE     TrackType_Type = 2
	TrackType_POST    TrackType_Type = 3
)

// Enum value maps for TrackType_Type.
var (
	TrackType_Type_name = map[int32]string{
		0: "DUMMY",
		1: "REGULAR",
		2: "PRE",
		3: "POST",
	}
	TrackType_Type_value = map[string]int32{
		"DUMMY":   0,
		"REGULAR": 1,
		"PRE":     2,
		"POST":    3,
	}
)

func (x TrackType_Type) Enum() *TrackType_Type {
	p := new(TrackType_Type)
	*p = x
	return p
}

func (x TrackType_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrackType_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_sushi_rpc_proto_enumTypes[3].Descriptor()
}

func (TrackType_Type) Type() protoreflect.EnumType {
	return &file_sushi_rpc_proto_enumTypes[3]
}

func (x TrackType_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrackType_Type.Descriptor instead.
func (TrackType_Type) EnumDescriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{21, 0}
}

type PluginType_Type int32

const (
	PluginType_DUMMY    PluginType_Type = 0
	PluginType_INTERNAL PluginType_Type = 1
	PluginType_VST2X    PluginType_Type = 2
	PluginType_VST3X    PluginType_Type = 3
	PluginType_LV2      PluginType_Type = 4
)

// Enum value maps for PluginType_Type.
var (
	PluginType_Type_name = map[int32]string{
		0: "DUMMY",
		1: "INTERNAL",
		2: "VST2X",
		3: "VST3X",
		4: "LV2",
	}
	PluginType_Type_value = map[string]int32{
		"DUMMY":    0,
		"INTERNAL": 1,
		"VST2X":    2,
		"VST3X":    3,
		"LV2":      4,
	}
)

func (x PluginType_Type) Enum() *PluginType_Type {
	p := new(PluginType_Type)
	*p = x
	return p
}

func (x PluginType_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PluginType_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_sushi_rpc_proto_enumTypes[4].Descriptor()
}

func (PluginType_Type) Type() protoreflect.EnumType {
	return &file_sushi_rpc_proto_enumTypes[4]
}

func (x PluginType_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PluginType_Type.Descriptor instead.
func (PluginType_Type) EnumDescriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{43, 0}
}

type MidiChannel_Channel int32

const (
	MidiChannel_DUMMY        MidiChannel_Channel = 0
	MidiChannel_MIDI_CH_1    MidiChannel_Channel = 1
	MidiChannel_MIDI_CH_2    MidiChannel_Channel = 2
	MidiChannel_MIDI_CH_3    MidiChannel_Channel = 3
	MidiChannel_MIDI_CH_4    MidiChannel_Channel = 4
	MidiChannel_MIDI_CH_5    MidiChannel_Channel = 5
	MidiChannel_MIDI_CH_6    MidiChannel_Channel = 6
	MidiChannel_MIDI_CH_7    MidiChannel_Channel = 7
	MidiChannel_MIDI_CH_8    MidiChannel_Channel = 8
	MidiChannel_MIDI_CH_9    MidiChannel_Channel = 9
	MidiChannel_MIDI_CH_10   MidiChannel_Channel = 10
	MidiChannel_MIDI_CH_11   MidiChannel_Channel = 11
	MidiChannel_MIDI_CH_12   MidiChannel_Channel = 12
	MidiChannel_MIDI_CH_13   MidiChannel_Channel = 13
	MidiChannel_MIDI_CH_14   MidiChannel_Channel = 14
	MidiChannel_MIDI_CH_15   MidiChannel_Channel = 15
	MidiChannel_MIDI_CH_16   MidiChannel_Channel = 16
	MidiChannel_MIDI_CH_OMNI MidiChannel_Channel = 17
)

// Enum value maps for MidiChannel_Channel.
var (
	MidiChannel_Channel_name = map[int32]string{
		0:  "DUMMY",
		1:  "MIDI_CH_1",
		2:  "MIDI_CH_2",
		3:  "MIDI_CH_3",
		4:  "MIDI_CH_4",
		5:  "MIDI_CH_5",
		6:  "MIDI_CH_6",
		7:  "MIDI_CH_7",
		8:  "MIDI_CH_8",
		9:  "MIDI_CH_9",
		10: "MIDI_CH_10",
		11: "MIDI_CH_11",
		12: "MIDI_CH_12",
		13: "MIDI_CH_13",
		14: "MIDI_CH_14",
		15: "MIDI_CH_15",
		16: "MIDI_CH_16",
		17: "MIDI_CH_OMNI",
	}
	MidiChannel_Channel_value = map[string]int32{
		"DUMMY":        0,
		"MIDI_CH_1":    1,
		"MIDI_CH_2":    2,
		"MIDI_CH_3":    3,
		"MIDI_CH_4":    4,
		"MIDI_CH_5":    5,
		"MIDI_CH_6":    6,
		"MIDI_CH_7":    7,
		"MIDI_CH_8":    8,
		"MIDI_CH_9":    9,
		"MIDI_CH_10":   10,
		"MIDI_CH_11":   11,
		"MIDI_CH_12":   12,
		"MIDI_CH_13":   13,
		"MIDI_CH_14":   14,
		"MIDI_CH_15":   15,
		"MIDI_CH_16":   16,
		"MIDI_CH_OMNI": 17,
	}
)

func (x MidiChannel_Channel) Enum() *MidiChannel_Channel {
	p := new(MidiChannel_Channel)
	*p = x
	return p
}

func (x MidiChannel_Channel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MidiChannel_Channel) Descriptor() protoreflect.EnumDescriptor {
	return file_sushi_rpc_proto_enumTypes[5].Descriptor()
}

func (MidiChannel_Channel) Type() protoreflect.EnumType {
	return &file_sushi_rpc_proto_enumTypes[5]
}

func (x MidiChannel_Channel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MidiChannel_Channel.Descriptor instead.
func (MidiChannel_Channel) EnumDescriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{54, 0}
}

type TrackUpdate_Action int32

const (
	TrackUpdate_DUMMY         TrackUpdate_Action = 0
	TrackUpdate_TRACK_ADDED   TrackUpdate_Action = 1
	TrackUpdate_TRACK_DELETED TrackUpdate_Action = 2
)

// Enum value maps for TrackUpdate_Action.
var (
	TrackUpdate_Action_name = map[int32]string{
		0: "DUMMY",
		1: "TRACK_ADDED",
		2: "TRACK_DELETED",
	}
	TrackUpdate_Action_value = map[string]int32{
		"DUMMY":         0,
		"TRACK_ADDED":   1,
		"TRACK_DELETED": 2,
	}
)

func (x TrackUpdate_Action) Enum() *TrackUpdate_Action {
	p := new(TrackUpdate_Action)
	*p = x
	return p
}

func (x TrackUpdate_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrackUpdate_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_sushi_rpc_proto_enumTypes[6].Descriptor()
}

func (TrackUpdate_Action) Type() protoreflect.EnumType {
	return &file_sushi_rpc_proto_enumTypes[6]
}

func (x TrackUpdate_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrackUpdate_Action.Descriptor instead.
func (TrackUpdate_Action) EnumDescriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{70, 0}
}

type ProcessorUpdate_Action int32

const (
	ProcessorUpdate_DUMMY             ProcessorUpdate_Action = 0
	ProcessorUpdate_PROCESSOR_ADDED   ProcessorUpdate_Action = 1
	ProcessorUpdate_PROCESSOR_DELETED ProcessorUpdate_Action = 2
)

// Enum value maps for ProcessorUpdate_Action.
var (
	ProcessorUpdate_Action_name = map[int32]string{
		0: "DUMMY",
		1: "PROCESSOR_ADDED",
		2: "PROCESSOR_DELETED",
	}
	ProcessorUpdate_Action_value = map[string]int32{
		"DUMMY":             0,
		"PROCESSOR_ADDED":   1,
		"PROCESSOR_DELETED": 2,
	}
)

func (x ProcessorUpdate_Action) Enum() *ProcessorUpdate_Action {
	p := new(ProcessorUpdate_Action)
	*p = x
	return p
}

func (x ProcessorUpdate_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProcessorUpdate_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_sushi_rpc_proto_enumTypes[7].Descriptor()
}

func (ProcessorUpdate_Action) Type() protoreflect.EnumType {
	return &file_sushi_rpc_proto_enumTypes[7]
}

func (x ProcessorUpdate_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProcessorUpdate_Action.Descriptor instead.
func (ProcessorUpdate_Action) EnumDescriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{71, 0}
}

type GenericVoidValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GenericVoidValue) Reset() {
	*x = GenericVoidValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericVoidValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericVoidValue) ProtoMessage() {}

func (x *GenericVoidValue) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericVoidValue.ProtoReflect.Descriptor instead.
func (*GenericVoidValue) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{0}
}

type GenericFloatValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float32 `protobuf:"fixed32,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GenericFloatValue) Reset() {
	*x = GenericFloatValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericFloatValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericFloatValue) ProtoMessage() {}

func (x *GenericFloatValue) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericFloatValue.ProtoReflect.Descriptor instead.
func (*GenericFloatValue) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{1}
}

func (x *GenericFloatValue) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type GenericIntValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GenericIntValue) Reset() {
	*x = GenericIntValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericIntValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericIntValue) ProtoMessage() {}

func (x *GenericIntValue) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericIntValue.ProtoReflect.Descriptor instead.
func (*GenericIntValue) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{2}
}

func (x *GenericIntValue) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type GenericBoolValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GenericBoolValue) Reset() {
	*x = GenericBoolValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericBoolValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericBoolValue) ProtoMessage() {}

func (x *GenericBoolValue) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericBoolValue.ProtoReflect.Descriptor instead.
func (*GenericBoolValue) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{3}
}

func (x *GenericBoolValue) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type GenericStringValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GenericStringValue) Reset() {
	*x = GenericStringValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericStringValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericStringValue) ProtoMessage() {}

func (x *GenericStringValue) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericStringValue.ProtoReflect.Descriptor instead.
func (*GenericStringValue) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{4}
}

func (x *GenericStringValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type OptionalBoolValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasValue bool `protobuf:"varint,1,opt,name=has_value,json=hasValue,proto3" json:"has_value,omitempty"`
	Value    bool `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *OptionalBoolValue) Reset() {
	*x = OptionalBoolValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionalBoolValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionalBoolValue) ProtoMessage() {}

func (x *OptionalBoolValue) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionalBoolValue.ProtoReflect.Descriptor instead.
func (*OptionalBoolValue) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{5}
}

func (x *OptionalBoolValue) GetHasValue() bool {
	if x != nil {
		return x.HasValue
	}
	return false
}

func (x *OptionalBoolValue) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type OptionalIntValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasValue bool  `protobuf:"varint,1,opt,name=has_value,json=hasValue,proto3" json:"has_value,omitempty"`
	Value    int32 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *OptionalIntValue) Reset() {
	*x = OptionalIntValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionalIntValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionalIntValue) ProtoMessage() {}

func (x *OptionalIntValue) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionalIntValue.ProtoReflect.Descriptor instead.
func (*OptionalIntValue) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{6}
}

func (x *OptionalIntValue) GetHasValue() bool {
	if x != nil {
		return x.HasValue
	}
	return false
}

func (x *OptionalIntValue) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type SushiBuildInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version         string   `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	BuildOptions    []string `protobuf:"bytes,2,rep,name=build_options,json=buildOptions,proto3" json:"build_options,omitempty"`
	AudioBufferSize int32    `protobuf:"varint,3,opt,name=audio_buffer_size,json=audioBufferSize,proto3" json:"audio_buffer_size,omitempty"`
	CommitHash      string   `protobuf:"bytes,4,opt,name=commit_hash,json=commitHash,proto3" json:"commit_hash,omitempty"`
	BuildDate       string   `protobuf:"bytes,5,opt,name=build_date,json=buildDate,proto3" json:"build_date,omitempty"`
}

func (x *SushiBuildInfo) Reset() {
	*x = SushiBuildInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SushiBuildInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SushiBuildInfo) ProtoMessage() {}

func (x *SushiBuildInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SushiBuildInfo.ProtoReflect.Descriptor instead.
func (*SushiBuildInfo) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{7}
}

func (x *SushiBuildInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *SushiBuildInfo) GetBuildOptions() []string {
	if x != nil {
		return x.BuildOptions
	}
	return nil
}

func (x *SushiBuildInfo) GetAudioBufferSize() int32 {
	if x != nil {
		return x.AudioBufferSize
	}
	return 0
}

func (x *SushiBuildInfo) GetCommitHash() string {
	if x != nil {
		return x.CommitHash
	}
	return ""
}

func (x *SushiBuildInfo) GetBuildDate() string {
	if x != nil {
		return x.BuildDate
	}
	return ""
}

type TrackIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TrackIdentifier) Reset() {
	*x = TrackIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackIdentifier) ProtoMessage() {}

func (x *TrackIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackIdentifier.ProtoReflect.Descriptor instead.
func (*TrackIdentifier) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{8}
}

func (x *TrackIdentifier) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ProcessorIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ProcessorIdentifier) Reset() {
	*x = ProcessorIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessorIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessorIdentifier) ProtoMessage() {}

func (x *ProcessorIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessorIdentifier.ProtoReflect.Descriptor instead.
func (*ProcessorIdentifier) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{9}
}

func (x *ProcessorIdentifier) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ParameterIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessorId int32 `protobuf:"varint,1,opt,name=processor_id,json=processorId,proto3" json:"processor_id,omitempty"`
	ParameterId int32 `protobuf:"varint,2,opt,name=parameter_id,json=parameterId,proto3" json:"parameter_id,omitempty"`
}

func (x *ParameterIdentifier) Reset() {
	*x = ParameterIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterIdentifier) ProtoMessage() {}

func (x *ParameterIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterIdentifier.ProtoReflect.Descriptor instead.
func (*ParameterIdentifier) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{10}
}

func (x *ParameterIdentifier) GetProcessorId() int32 {
	if x != nil {
		return x.ProcessorId
	}
	return 0
}

func (x *ParameterIdentifier) GetParameterId() int32 {
	if x != nil {
		return x.ParameterId
	}
	return 0
}

type PropertyIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessorId int32 `protobuf:"varint,1,opt,name=processor_id,json=processorId,proto3" json:"processor_id,omitempty"`
	PropertyId  int32 `protobuf:"varint,2,opt,name=property_id,json=propertyId,proto3" json:"property_id,omitempty"`
}

func (x *PropertyIdentifier) Reset() {
	*x = PropertyIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyIdentifier) ProtoMessage() {}

func (x *PropertyIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyIdentifier.ProtoReflect.Descriptor instead.
func (*PropertyIdentifier) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{11}
}

func (x *PropertyIdentifier) GetProcessorId() int32 {
	if x != nil {
		return x.ProcessorId
	}
	return 0
}

func (x *PropertyIdentifier) GetPropertyId() int32 {
	if x != nil {
		return x.PropertyId
	}
	return 0
}

// 0 is reserved for "not set" in protobuf, so we don't use it for a valid response
type ParameterType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type ParameterType_Type `protobuf:"varint,1,opt,name=type,proto3,enum=sushi_rpc.ParameterType_Type" json:"type,omitempty"`
}

func (x *ParameterType) Reset() {
	*x = ParameterType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterType) ProtoMessage() {}

func (x *ParameterType) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterType.ProtoReflect.Descriptor instead.
func (*ParameterType) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{12}
}

func (x *ParameterType) GetType() ParameterType_Type {
	if x != nil {
		return x.Type
	}
	return ParameterType_DUMMY
}

type PlayingMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode PlayingMode_Mode `protobuf:"varint,1,opt,name=mode,proto3,enum=sushi_rpc.PlayingMode_Mode" json:"mode,omitempty"`
}

func (x *PlayingMode) Reset() {
	*x = PlayingMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayingMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayingMode) ProtoMessage() {}

func (x *PlayingMode) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayingMode.ProtoReflect.Descriptor instead.
func (*PlayingMode) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{13}
}

func (x *PlayingMode) GetMode() PlayingMode_Mode {
	if x != nil {
		return x.Mode
	}
	return PlayingMode_DUMMY
}

type SyncMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode SyncMode_Mode `protobuf:"varint,1,opt,name=mode,proto3,enum=sushi_rpc.SyncMode_Mode" json:"mode,omitempty"`
}

func (x *SyncMode) Reset() {
	*x = SyncMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncMode) ProtoMessage() {}

func (x *SyncMode) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncMode.ProtoReflect.Descriptor instead.
func (*SyncMode) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{14}
}

func (x *SyncMode) GetMode() SyncMode_Mode {
	if x != nil {
		return x.Mode
	}
	return SyncMode_DUMMY
}

type TimeSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Numerator   int32 `protobuf:"varint,1,opt,name=numerator,proto3" json:"numerator,omitempty"`
	Denominator int32 `protobuf:"varint,2,opt,name=denominator,proto3" json:"denominator,omitempty"`
}

func (x *TimeSignature) Reset() {
	*x = TimeSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeSignature) ProtoMessage() {}

func (x *TimeSignature) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeSignature.ProtoReflect.Descriptor instead.
func (*TimeSignature) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{15}
}

func (x *TimeSignature) GetNumerator() int32 {
	if x != nil {
		return x.Numerator
	}
	return 0
}

func (x *TimeSignature) GetDenominator() int32 {
	if x != nil {
		return x.Denominator
	}
	return 0
}

type CpuTimings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Average float32 `protobuf:"fixed32,1,opt,name=average,proto3" json:"average,omitempty"`
	Min     float32 `protobuf:"fixed32,2,opt,name=min,proto3" json:"min,omitempty"`
	Max     float32 `protobuf:"fixed32,3,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *CpuTimings) Reset() {
	*x = CpuTimings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CpuTimings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CpuTimings) ProtoMessage() {}

func (x *CpuTimings) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CpuTimings.ProtoReflect.Descriptor instead.
func (*CpuTimings) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{16}
}

func (x *CpuTimings) GetAverage() float32 {
	if x != nil {
		return x.Average
	}
	return 0
}

func (x *CpuTimings) GetMin() float32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *CpuTimings) GetMax() float32 {
	if x != nil {
		return x.Max
	}
	return 0
}

type NoteOnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Track    *TrackIdentifier `protobuf:"bytes,1,opt,name=track,proto3" json:"track,omitempty"`
	Channel  int32            `protobuf:"varint,2,opt,name=channel,proto3" json:"channel,omitempty"`
	Note     int32            `protobuf:"varint,3,opt,name=note,proto3" json:"note,omitempty"`
	Velocity float32          `protobuf:"fixed32,4,opt,name=velocity,proto3" json:"velocity,omitempty"`
}

func (x *NoteOnRequest) Reset() {
	*x = NoteOnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoteOnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteOnRequest) ProtoMessage() {}

func (x *NoteOnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteOnRequest.ProtoReflect.Descriptor instead.
func (*NoteOnRequest) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{17}
}

func (x *NoteOnRequest) GetTrack() *TrackIdentifier {
	if x != nil {
		return x.Track
	}
	return nil
}

func (x *NoteOnRequest) GetChannel() int32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

func (x *NoteOnRequest) GetNote() int32 {
	if x != nil {
		return x.Note
	}
	return 0
}

func (x *NoteOnRequest) GetVelocity() float32 {
	if x != nil {
		return x.Velocity
	}
	return 0
}

type NoteOffRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Track    *TrackIdentifier `protobuf:"bytes,1,opt,name=track,proto3" json:"track,omitempty"`
	Channel  int32            `protobuf:"varint,2,opt,name=channel,proto3" json:"channel,omitempty"`
	Note     int32            `protobuf:"varint,3,opt,name=note,proto3" json:"note,omitempty"`
	Velocity float32          `protobuf:"fixed32,4,opt,name=velocity,proto3" json:"velocity,omitempty"`
}

func (x *NoteOffRequest) Reset() {
	*x = NoteOffRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoteOffRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteOffRequest) ProtoMessage() {}

func (x *NoteOffRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteOffRequest.ProtoReflect.Descriptor instead.
func (*NoteOffRequest) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{18}
}

func (x *NoteOffRequest) GetTrack() *TrackIdentifier {
	if x != nil {
		return x.Track
	}
	return nil
}

func (x *NoteOffRequest) GetChannel() int32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

func (x *NoteOffRequest) GetNote() int32 {
	if x != nil {
		return x.Note
	}
	return 0
}

func (x *NoteOffRequest) GetVelocity() float32 {
	if x != nil {
		return x.Velocity
	}
	return 0
}

type NoteAftertouchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Track   *TrackIdentifier `protobuf:"bytes,1,opt,name=track,proto3" json:"track,omitempty"`
	Channel int32            `protobuf:"varint,2,opt,name=channel,proto3" json:"channel,omitempty"`
	Note    int32            `protobuf:"varint,3,opt,name=note,proto3" json:"note,omitempty"`
	Value   float32          `protobuf:"fixed32,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NoteAftertouchRequest) Reset() {
	*x = NoteAftertouchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoteAftertouchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteAftertouchRequest) ProtoMessage() {}

func (x *NoteAftertouchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteAftertouchRequest.ProtoReflect.Descriptor instead.
func (*NoteAftertouchRequest) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{19}
}

func (x *NoteAftertouchRequest) GetTrack() *TrackIdentifier {
	if x != nil {
		return x.Track
	}
	return nil
}

func (x *NoteAftertouchRequest) GetChannel() int32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

func (x *NoteAftertouchRequest) GetNote() int32 {
	if x != nil {
		return x.Note
	}
	return 0
}

func (x *NoteAftertouchRequest) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type NoteModulationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Track   *TrackIdentifier `protobuf:"bytes,1,opt,name=track,proto3" json:"track,omitempty"`
	Channel int32            `protobuf:"varint,2,opt,name=channel,proto3" json:"channel,omitempty"`
	Value   float32          `protobuf:"fixed32,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NoteModulationRequest) Reset() {
	*x = NoteModulationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoteModulationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteModulationRequest) ProtoMessage() {}

func (x *NoteModulationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteModulationRequest.ProtoReflect.Descriptor instead.
func (*NoteModulationRequest) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{20}
}

func (x *NoteModulationRequest) GetTrack() *TrackIdentifier {
	if x != nil {
		return x.Track
	}
	return nil
}

func (x *NoteModulationRequest) GetChannel() int32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

func (x *NoteModulationRequest) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type TrackType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type TrackType_Type `protobuf:"varint,1,opt,name=type,proto3,enum=sushi_rpc.TrackType_Type" json:"type,omitempty"`
}

func (x *TrackType) Reset() {
	*x = TrackType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackType) ProtoMessage() {}

func (x *TrackType) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackType.ProtoReflect.Descriptor instead.
func (*TrackType) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{21}
}

func (x *TrackType) GetType() TrackType_Type {
	if x != nil {
		return x.Type
	}
	return TrackType_DUMMY
}

type TrackInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Label      string                 `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Name       string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Channels   int32                  `protobuf:"varint,4,opt,name=channels,proto3" json:"channels,omitempty"`
	Buses      int32                  `protobuf:"varint,5,opt,name=buses,proto3" json:"buses,omitempty"`
	Type       *TrackType             `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	Processors []*ProcessorIdentifier `protobuf:"bytes,7,rep,name=processors,proto3" json:"processors,omitempty"`
}

func (x *TrackInfo) Reset() {
	*x = TrackInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackInfo) ProtoMessage() {}

func (x *TrackInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackInfo.ProtoReflect.Descriptor instead.
func (*TrackInfo) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{22}
}

func (x *TrackInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TrackInfo) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *TrackInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TrackInfo) GetChannels() int32 {
	if x != nil {
		return x.Channels
	}
	return 0
}

func (x *TrackInfo) GetBuses() int32 {
	if x != nil {
		return x.Buses
	}
	return 0
}

func (x *TrackInfo) GetType() *TrackType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *TrackInfo) GetProcessors() []*ProcessorIdentifier {
	if x != nil {
		return x.Processors
	}
	return nil
}

type TrackInfoList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tracks []*TrackInfo `protobuf:"bytes,1,rep,name=tracks,proto3" json:"tracks,omitempty"`
}

func (x *TrackInfoList) Reset() {
	*x = TrackInfoList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackInfoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackInfoList) ProtoMessage() {}

func (x *TrackInfoList) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackInfoList.ProtoReflect.Descriptor instead.
func (*TrackInfoList) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{23}
}

func (x *TrackInfoList) GetTracks() []*TrackInfo {
	if x != nil {
		return x.Tracks
	}
	return nil
}

type ProcessorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Label          string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Name           string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	ParameterCount int32  `protobuf:"varint,4,opt,name=parameter_count,json=parameterCount,proto3" json:"parameter_count,omitempty"`
	ProgramCount   int32  `protobuf:"varint,5,opt,name=program_count,json=programCount,proto3" json:"program_count,omitempty"`
}

func (x *ProcessorInfo) Reset() {
	*x = ProcessorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessorInfo) ProtoMessage() {}

func (x *ProcessorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessorInfo.ProtoReflect.Descriptor instead.
func (*ProcessorInfo) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{24}
}

func (x *ProcessorInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProcessorInfo) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *ProcessorInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProcessorInfo) GetParameterCount() int32 {
	if x != nil {
		return x.ParameterCount
	}
	return 0
}

func (x *ProcessorInfo) GetProgramCount() int32 {
	if x != nil {
		return x.ProgramCount
	}
	return 0
}

type ProcessorInfoList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Processors []*ProcessorInfo `protobuf:"bytes,1,rep,name=processors,proto3" json:"processors,omitempty"`
}

func (x *ProcessorInfoList) Reset() {
	*x = ProcessorInfoList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessorInfoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessorInfoList) ProtoMessage() {}

func (x *ProcessorInfoList) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessorInfoList.ProtoReflect.Descriptor instead.
func (*ProcessorInfoList) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{25}
}

func (x *ProcessorInfoList) GetProcessors() []*ProcessorInfo {
	if x != nil {
		return x.Processors
	}
	return nil
}

type ProgramIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Program int32 `protobuf:"varint,1,opt,name=program,proto3" json:"program,omitempty"`
}

func (x *ProgramIdentifier) Reset() {
	*x = ProgramIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProgramIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgramIdentifier) ProtoMessage() {}

func (x *ProgramIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProgramIdentifier.ProtoReflect.Descriptor instead.
func (*ProgramIdentifier) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{26}
}

func (x *ProgramIdentifier) GetProgram() int32 {
	if x != nil {
		return x.Program
	}
	return 0
}

type ProcessorProgramIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Processor *ProcessorIdentifier `protobuf:"bytes,1,opt,name=processor,proto3" json:"processor,omitempty"`
	Program   int32                `protobuf:"varint,2,opt,name=program,proto3" json:"program,omitempty"`
}

func (x *ProcessorProgramIdentifier) Reset() {
	*x = ProcessorProgramIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessorProgramIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessorProgramIdentifier) ProtoMessage() {}

func (x *ProcessorProgramIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessorProgramIdentifier.ProtoReflect.Descriptor instead.
func (*ProcessorProgramIdentifier) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{27}
}

func (x *ProcessorProgramIdentifier) GetProcessor() *ProcessorIdentifier {
	if x != nil {
		return x.Processor
	}
	return nil
}

func (x *ProcessorProgramIdentifier) GetProgram() int32 {
	if x != nil {
		return x.Program
	}
	return 0
}

type ProgramInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   *ProgramIdentifier `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ProgramInfo) Reset() {
	*x = ProgramInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProgramInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgramInfo) ProtoMessage() {}

func (x *ProgramInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProgramInfo.ProtoReflect.Descriptor instead.
func (*ProgramInfo) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{28}
}

func (x *ProgramInfo) GetId() *ProgramIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ProgramInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ProgramInfoList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Programs []*ProgramInfo `protobuf:"bytes,1,rep,name=programs,proto3" json:"programs,omitempty"`
}

func (x *ProgramInfoList) Reset() {
	*x = ProgramInfoList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProgramInfoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgramInfoList) ProtoMessage() {}

func (x *ProgramInfoList) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProgramInfoList.ProtoReflect.Descriptor instead.
func (*ProgramInfoList) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{29}
}

func (x *ProgramInfoList) GetPrograms() []*ProgramInfo {
	if x != nil {
		return x.Programs
	}
	return nil
}

type ProcessorProgramSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Processor *ProcessorIdentifier `protobuf:"bytes,1,opt,name=processor,proto3" json:"processor,omitempty"`
	Program   *ProgramIdentifier   `protobuf:"bytes,2,opt,name=program,proto3" json:"program,omitempty"`
}

func (x *ProcessorProgramSetRequest) Reset() {
	*x = ProcessorProgramSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessorProgramSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessorProgramSetRequest) ProtoMessage() {}

func (x *ProcessorProgramSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessorProgramSetRequest.ProtoReflect.Descriptor instead.
func (*ProcessorProgramSetRequest) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{30}
}

func (x *ProcessorProgramSetRequest) GetProcessor() *ProcessorIdentifier {
	if x != nil {
		return x.Processor
	}
	return nil
}

func (x *ProcessorProgramSetRequest) GetProgram() *ProgramIdentifier {
	if x != nil {
		return x.Program
	}
	return nil
}

type ProcessorBypassStateSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Processor *ProcessorIdentifier `protobuf:"bytes,1,opt,name=processor,proto3" json:"processor,omitempty"`
	Value     bool                 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ProcessorBypassStateSetRequest) Reset() {
	*x = ProcessorBypassStateSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessorBypassStateSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessorBypassStateSetRequest) ProtoMessage() {}

func (x *ProcessorBypassStateSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessorBypassStateSetRequest.ProtoReflect.Descriptor instead.
func (*ProcessorBypassStateSetRequest) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{31}
}

func (x *ProcessorBypassStateSetRequest) GetProcessor() *ProcessorIdentifier {
	if x != nil {
		return x.Processor
	}
	return nil
}

func (x *ProcessorBypassStateSetRequest) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type ProcessorState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProgramId  *OptionalIntValue  `protobuf:"bytes,1,opt,name=program_id,json=programId,proto3" json:"program_id,omitempty"`
	Bypassed   *OptionalBoolValue `protobuf:"bytes,2,opt,name=bypassed,proto3" json:"bypassed,omitempty"`
	Properties []*PropertyValue   `protobuf:"bytes,3,rep,name=properties,proto3" json:"properties,omitempty"`
	Parameters []*ParameterValue  `protobuf:"bytes,4,rep,name=parameters,proto3" json:"parameters,omitempty"`
	BinaryData []byte             `protobuf:"bytes,5,opt,name=binary_data,json=binaryData,proto3" json:"binary_data,omitempty"`
}

func (x *ProcessorState) Reset() {
	*x = ProcessorState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessorState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessorState) ProtoMessage() {}

func (x *ProcessorState) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessorState.ProtoReflect.Descriptor instead.
func (*ProcessorState) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{32}
}

func (x *ProcessorState) GetProgramId() *OptionalIntValue {
	if x != nil {
		return x.ProgramId
	}
	return nil
}

func (x *ProcessorState) GetBypassed() *OptionalBoolValue {
	if x != nil {
		return x.Bypassed
	}
	return nil
}

func (x *ProcessorState) GetProperties() []*PropertyValue {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *ProcessorState) GetParameters() []*ParameterValue {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *ProcessorState) GetBinaryData() []byte {
	if x != nil {
		return x.BinaryData
	}
	return nil
}

type ProcessorStateSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Processor *ProcessorIdentifier `protobuf:"bytes,1,opt,name=processor,proto3" json:"processor,omitempty"`
	State     *ProcessorState      `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *ProcessorStateSetRequest) Reset() {
	*x = ProcessorStateSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessorStateSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessorStateSetRequest) ProtoMessage() {}

func (x *ProcessorStateSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessorStateSetRequest.ProtoReflect.Descriptor instead.
func (*ProcessorStateSetRequest) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{33}
}

func (x *ProcessorStateSetRequest) GetProcessor() *ProcessorIdentifier {
	if x != nil {
		return x.Processor
	}
	return nil
}

func (x *ProcessorStateSetRequest) GetState() *ProcessorState {
	if x != nil {
		return x.State
	}
	return nil
}

type ParameterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type           *ParameterType `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Label          string         `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
	Name           string         `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Unit           string         `protobuf:"bytes,5,opt,name=unit,proto3" json:"unit,omitempty"`
	Automatable    bool           `protobuf:"varint,6,opt,name=automatable,proto3" json:"automatable,omitempty"`
	MinDomainValue float32        `protobuf:"fixed32,7,opt,name=min_domain_value,json=minDomainValue,proto3" json:"min_domain_value,omitempty"`
	MaxDomainValue float32        `protobuf:"fixed32,8,opt,name=max_domain_value,json=maxDomainValue,proto3" json:"max_domain_value,omitempty"`
}

func (x *ParameterInfo) Reset() {
	*x = ParameterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterInfo) ProtoMessage() {}

func (x *ParameterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterInfo.ProtoReflect.Descriptor instead.
func (*ParameterInfo) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{34}
}

func (x *ParameterInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ParameterInfo) GetType() *ParameterType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ParameterInfo) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *ParameterInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ParameterInfo) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *ParameterInfo) GetAutomatable() bool {
	if x != nil {
		return x.Automatable
	}
	return false
}

func (x *ParameterInfo) GetMinDomainValue() float32 {
	if x != nil {
		return x.MinDomainValue
	}
	return 0
}

func (x *ParameterInfo) GetMaxDomainValue() float32 {
	if x != nil {
		return x.MaxDomainValue
	}
	return 0
}

type ParameterInfoList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parameters []*ParameterInfo `protobuf:"bytes,1,rep,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *ParameterInfoList) Reset() {
	*x = ParameterInfoList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterInfoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterInfoList) ProtoMessage() {}

func (x *ParameterInfoList) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterInfoList.ProtoReflect.Descriptor instead.
func (*ParameterInfoList) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{35}
}

func (x *ParameterInfoList) GetParameters() []*ParameterInfo {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type ParameterIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Processor     *ProcessorIdentifier `protobuf:"bytes,1,opt,name=processor,proto3" json:"processor,omitempty"`
	ParameterName string               `protobuf:"bytes,2,opt,name=ParameterName,proto3" json:"ParameterName,omitempty"`
}

func (x *ParameterIdRequest) Reset() {
	*x = ParameterIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterIdRequest) ProtoMessage() {}

func (x *ParameterIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterIdRequest.ProtoReflect.Descriptor instead.
func (*ParameterIdRequest) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{36}
}

func (x *ParameterIdRequest) GetProcessor() *ProcessorIdentifier {
	if x != nil {
		return x.Processor
	}
	return nil
}

func (x *ParameterIdRequest) GetParameterName() string {
	if x != nil {
		return x.ParameterName
	}
	return ""
}

type ParameterValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parameter *ParameterIdentifier `protobuf:"bytes,1,opt,name=parameter,proto3" json:"parameter,omitempty"`
	Value     float32              `protobuf:"fixed32,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ParameterValue) Reset() {
	*x = ParameterValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterValue) ProtoMessage() {}

func (x *ParameterValue) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterValue.ProtoReflect.Descriptor instead.
func (*ParameterValue) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{37}
}

func (x *ParameterValue) GetParameter() *ParameterIdentifier {
	if x != nil {
		return x.Parameter
	}
	return nil
}

func (x *ParameterValue) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type ParameterUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parameter       *ParameterIdentifier `protobuf:"bytes,1,opt,name=parameter,proto3" json:"parameter,omitempty"`
	NormalizedValue float32              `protobuf:"fixed32,2,opt,name=normalized_value,json=normalizedValue,proto3" json:"normalized_value,omitempty"`
	DomainValue     float32              `protobuf:"fixed32,3,opt,name=domain_value,json=domainValue,proto3" json:"domain_value,omitempty"`
	FormattedValue  string               `protobuf:"bytes,4,opt,name=formatted_value,json=formattedValue,proto3" json:"formatted_value,omitempty"`
}

func (x *ParameterUpdate) Reset() {
	*x = ParameterUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterUpdate) ProtoMessage() {}

func (x *ParameterUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterUpdate.ProtoReflect.Descriptor instead.
func (*ParameterUpdate) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{38}
}

func (x *ParameterUpdate) GetParameter() *ParameterIdentifier {
	if x != nil {
		return x.Parameter
	}
	return nil
}

func (x *ParameterUpdate) GetNormalizedValue() float32 {
	if x != nil {
		return x.NormalizedValue
	}
	return 0
}

func (x *ParameterUpdate) GetDomainValue() float32 {
	if x != nil {
		return x.DomainValue
	}
	return 0
}

func (x *ParameterUpdate) GetFormattedValue() string {
	if x != nil {
		return x.FormattedValue
	}
	return ""
}

type PropertyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Label string `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *PropertyInfo) Reset() {
	*x = PropertyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyInfo) ProtoMessage() {}

func (x *PropertyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyInfo.ProtoReflect.Descriptor instead.
func (*PropertyInfo) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{39}
}

func (x *PropertyInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PropertyInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PropertyInfo) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type PropertyInfoList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Properties []*PropertyInfo `protobuf:"bytes,1,rep,name=properties,proto3" json:"properties,omitempty"`
}

func (x *PropertyInfoList) Reset() {
	*x = PropertyInfoList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyInfoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyInfoList) ProtoMessage() {}

func (x *PropertyInfoList) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyInfoList.ProtoReflect.Descriptor instead.
func (*PropertyInfoList) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{40}
}

func (x *PropertyInfoList) GetProperties() []*PropertyInfo {
	if x != nil {
		return x.Properties
	}
	return nil
}

type PropertyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Property *PropertyIdentifier `protobuf:"bytes,1,opt,name=property,proto3" json:"property,omitempty"`
	Value    string              `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PropertyValue) Reset() {
	*x = PropertyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyValue) ProtoMessage() {}

func (x *PropertyValue) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyValue.ProtoReflect.Descriptor instead.
func (*PropertyValue) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{41}
}

func (x *PropertyValue) GetProperty() *PropertyIdentifier {
	if x != nil {
		return x.Property
	}
	return nil
}

func (x *PropertyValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type PropertyIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Processor    *ProcessorIdentifier `protobuf:"bytes,1,opt,name=processor,proto3" json:"processor,omitempty"`
	PropertyName string               `protobuf:"bytes,2,opt,name=property_name,json=propertyName,proto3" json:"property_name,omitempty"`
}

func (x *PropertyIdRequest) Reset() {
	*x = PropertyIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyIdRequest) ProtoMessage() {}

func (x *PropertyIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyIdRequest.ProtoReflect.Descriptor instead.
func (*PropertyIdRequest) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{42}
}

func (x *PropertyIdRequest) GetProcessor() *ProcessorIdentifier {
	if x != nil {
		return x.Processor
	}
	return nil
}

func (x *PropertyIdRequest) GetPropertyName() string {
	if x != nil {
		return x.PropertyName
	}
	return ""
}

type PluginType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type PluginType_Type `protobuf:"varint,1,opt,name=type,proto3,enum=sushi_rpc.PluginType_Type" json:"type,omitempty"`
}

func (x *PluginType) Reset() {
	*x = PluginType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginType) ProtoMessage() {}

func (x *PluginType) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginType.ProtoReflect.Descriptor instead.
func (*PluginType) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{43}
}

func (x *PluginType) GetType() PluginType_Type {
	if x != nil {
		return x.Type
	}
	return PluginType_DUMMY
}

type ProcessorPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddToBack       bool                 `protobuf:"varint,1,opt,name=add_to_back,json=addToBack,proto3" json:"add_to_back,omitempty"`
	BeforeProcessor *ProcessorIdentifier `protobuf:"bytes,2,opt,name=before_processor,json=beforeProcessor,proto3" json:"before_processor,omitempty"`
}

func (x *ProcessorPosition) Reset() {
	*x = ProcessorPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessorPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessorPosition) ProtoMessage() {}

func (x *ProcessorPosition) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessorPosition.ProtoReflect.Descriptor instead.
func (*ProcessorPosition) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{44}
}

func (x *ProcessorPosition) GetAddToBack() bool {
	if x != nil {
		return x.AddToBack
	}
	return false
}

func (x *ProcessorPosition) GetBeforeProcessor() *ProcessorIdentifier {
	if x != nil {
		return x.BeforeProcessor
	}
	return nil
}

type CreateTrackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Channels int32  `protobuf:"varint,2,opt,name=channels,proto3" json:"channels,omitempty"`
}

func (x *CreateTrackRequest) Reset() {
	*x = CreateTrackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTrackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTrackRequest) ProtoMessage() {}

func (x *CreateTrackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTrackRequest.ProtoReflect.Descriptor instead.
func (*CreateTrackRequest) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{45}
}

func (x *CreateTrackRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateTrackRequest) GetChannels() int32 {
	if x != nil {
		return x.Channels
	}
	return 0
}

type CreateMultibusTrackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Buses int32  `protobuf:"varint,2,opt,name=buses,proto3" json:"buses,omitempty"`
}

func (x *CreateMultibusTrackRequest) Reset() {
	*x = CreateMultibusTrackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMultibusTrackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMultibusTrackRequest) ProtoMessage() {}

func (x *CreateMultibusTrackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMultibusTrackRequest.ProtoReflect.Descriptor instead.
func (*CreateMultibusTrackRequest) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{46}
}

func (x *CreateMultibusTrackRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateMultibusTrackRequest) GetBuses() int32 {
	if x != nil {
		return x.Buses
	}
	return 0
}

type CreatePreTrackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CreatePreTrackRequest) Reset() {
	*x = CreatePreTrackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePreTrackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePreTrackRequest) ProtoMessage() {}

func (x *CreatePreTrackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePreTrackRequest.ProtoReflect.Descriptor instead.
func (*CreatePreTrackRequest) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{47}
}

func (x *CreatePreTrackRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreatePostTrackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CreatePostTrackRequest) Reset() {
	*x = CreatePostTrackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePostTrackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePostTrackRequest) ProtoMessage() {}

func (x *CreatePostTrackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePostTrackRequest.ProtoReflect.Descriptor instead.
func (*CreatePostTrackRequest) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{48}
}

func (x *CreatePostTrackRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateProcessorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Uid      string             `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Path     string             `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	Type     *PluginType        `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Track    *TrackIdentifier   `protobuf:"bytes,5,opt,name=track,proto3" json:"track,omitempty"`
	Position *ProcessorPosition `protobuf:"bytes,6,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *CreateProcessorRequest) Reset() {
	*x = CreateProcessorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProcessorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProcessorRequest) ProtoMessage() {}

func (x *CreateProcessorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProcessorRequest.ProtoReflect.Descriptor instead.
func (*CreateProcessorRequest) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{49}
}

func (x *CreateProcessorRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateProcessorRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *CreateProcessorRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *CreateProcessorRequest) GetType() *PluginType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *CreateProcessorRequest) GetTrack() *TrackIdentifier {
	if x != nil {
		return x.Track
	}
	return nil
}

func (x *CreateProcessorRequest) GetPosition() *ProcessorPosition {
	if x != nil {
		return x.Position
	}
	return nil
}

type MoveProcessorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Processor   *ProcessorIdentifier `protobuf:"bytes,1,opt,name=processor,proto3" json:"processor,omitempty"`
	SourceTrack *TrackIdentifier     `protobuf:"bytes,2,opt,name=source_track,json=sourceTrack,proto3" json:"source_track,omitempty"`
	DestTrack   *TrackIdentifier     `protobuf:"bytes,3,opt,name=dest_track,json=destTrack,proto3" json:"dest_track,omitempty"`
	Position    *ProcessorPosition   `protobuf:"bytes,4,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *MoveProcessorRequest) Reset() {
	*x = MoveProcessorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveProcessorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveProcessorRequest) ProtoMessage() {}

func (x *MoveProcessorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveProcessorRequest.ProtoReflect.Descriptor instead.
func (*MoveProcessorRequest) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{50}
}

func (x *MoveProcessorRequest) GetProcessor() *ProcessorIdentifier {
	if x != nil {
		return x.Processor
	}
	return nil
}

func (x *MoveProcessorRequest) GetSourceTrack() *TrackIdentifier {
	if x != nil {
		return x.SourceTrack
	}
	return nil
}

func (x *MoveProcessorRequest) GetDestTrack() *TrackIdentifier {
	if x != nil {
		return x.DestTrack
	}
	return nil
}

func (x *MoveProcessorRequest) GetPosition() *ProcessorPosition {
	if x != nil {
		return x.Position
	}
	return nil
}

type DeleteProcessorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Processor *ProcessorIdentifier `protobuf:"bytes,1,opt,name=processor,proto3" json:"processor,omitempty"`
	Track     *TrackIdentifier     `protobuf:"bytes,2,opt,name=track,proto3" json:"track,omitempty"`
}

func (x *DeleteProcessorRequest) Reset() {
	*x = DeleteProcessorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProcessorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProcessorRequest) ProtoMessage() {}

func (x *DeleteProcessorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProcessorRequest.ProtoReflect.Descriptor instead.
func (*DeleteProcessorRequest) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{51}
}

func (x *DeleteProcessorRequest) GetProcessor() *ProcessorIdentifier {
	if x != nil {
		return x.Processor
	}
	return nil
}

func (x *DeleteProcessorRequest) GetTrack() *TrackIdentifier {
	if x != nil {
		return x.Track
	}
	return nil
}

type ParameterNotificationBlocklist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parameters []*ParameterIdentifier `protobuf:"bytes,1,rep,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *ParameterNotificationBlocklist) Reset() {
	*x = ParameterNotificationBlocklist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterNotificationBlocklist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterNotificationBlocklist) ProtoMessage() {}

func (x *ParameterNotificationBlocklist) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterNotificationBlocklist.ProtoReflect.Descriptor instead.
func (*ParameterNotificationBlocklist) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{52}
}

func (x *ParameterNotificationBlocklist) GetParameters() []*ParameterIdentifier {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type PropertyNotificationBlocklist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Properties []*PropertyIdentifier `protobuf:"bytes,1,rep,name=properties,proto3" json:"properties,omitempty"`
}

func (x *PropertyNotificationBlocklist) Reset() {
	*x = PropertyNotificationBlocklist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyNotificationBlocklist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyNotificationBlocklist) ProtoMessage() {}

func (x *PropertyNotificationBlocklist) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyNotificationBlocklist.ProtoReflect.Descriptor instead.
func (*PropertyNotificationBlocklist) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{53}
}

func (x *PropertyNotificationBlocklist) GetProperties() []*PropertyIdentifier {
	if x != nil {
		return x.Properties
	}
	return nil
}

type MidiChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel MidiChannel_Channel `protobuf:"varint,1,opt,name=channel,proto3,enum=sushi_rpc.MidiChannel_Channel" json:"channel,omitempty"`
}

func (x *MidiChannel) Reset() {
	*x = MidiChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MidiChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MidiChannel) ProtoMessage() {}

func (x *MidiChannel) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MidiChannel.ProtoReflect.Descriptor instead.
func (*MidiChannel) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{54}
}

func (x *MidiChannel) GetChannel() MidiChannel_Channel {
	if x != nil {
		return x.Channel
	}
	return MidiChannel_DUMMY
}

type AudioConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Track         *TrackIdentifier `protobuf:"bytes,1,opt,name=track,proto3" json:"track,omitempty"`
	TrackChannel  int32            `protobuf:"varint,2,opt,name=track_channel,json=trackChannel,proto3" json:"track_channel,omitempty"`
	EngineChannel int32            `protobuf:"varint,3,opt,name=engine_channel,json=engineChannel,proto3" json:"engine_channel,omitempty"`
}

func (x *AudioConnection) Reset() {
	*x = AudioConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioConnection) ProtoMessage() {}

func (x *AudioConnection) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioConnection.ProtoReflect.Descriptor instead.
func (*AudioConnection) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{55}
}

func (x *AudioConnection) GetTrack() *TrackIdentifier {
	if x != nil {
		return x.Track
	}
	return nil
}

func (x *AudioConnection) GetTrackChannel() int32 {
	if x != nil {
		return x.TrackChannel
	}
	return 0
}

func (x *AudioConnection) GetEngineChannel() int32 {
	if x != nil {
		return x.EngineChannel
	}
	return 0
}

type AudioConnectionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connections []*AudioConnection `protobuf:"bytes,1,rep,name=connections,proto3" json:"connections,omitempty"`
}

func (x *AudioConnectionList) Reset() {
	*x = AudioConnectionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioConnectionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioConnectionList) ProtoMessage() {}

func (x *AudioConnectionList) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioConnectionList.ProtoReflect.Descriptor instead.
func (*AudioConnectionList) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{56}
}

func (x *AudioConnectionList) GetConnections() []*AudioConnection {
	if x != nil {
		return x.Connections
	}
	return nil
}

type CvConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parameter *ParameterIdentifier `protobuf:"bytes,1,opt,name=parameter,proto3" json:"parameter,omitempty"`
	CvPortId  int32                `protobuf:"varint,2,opt,name=cv_port_id,json=cvPortId,proto3" json:"cv_port_id,omitempty"`
}

func (x *CvConnection) Reset() {
	*x = CvConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CvConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CvConnection) ProtoMessage() {}

func (x *CvConnection) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CvConnection.ProtoReflect.Descriptor instead.
func (*CvConnection) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{57}
}

func (x *CvConnection) GetParameter() *ParameterIdentifier {
	if x != nil {
		return x.Parameter
	}
	return nil
}

func (x *CvConnection) GetCvPortId() int32 {
	if x != nil {
		return x.CvPortId
	}
	return 0
}

type CvConnectionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connections []*CvConnection `protobuf:"bytes,1,rep,name=connections,proto3" json:"connections,omitempty"`
}

func (x *CvConnectionList) Reset() {
	*x = CvConnectionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CvConnectionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CvConnectionList) ProtoMessage() {}

func (x *CvConnectionList) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CvConnectionList.ProtoReflect.Descriptor instead.
func (*CvConnectionList) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{58}
}

func (x *CvConnectionList) GetConnections() []*CvConnection {
	if x != nil {
		return x.Connections
	}
	return nil
}

type GateConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Processor  *ProcessorIdentifier `protobuf:"bytes,1,opt,name=processor,proto3" json:"processor,omitempty"`
	GatePortId int32                `protobuf:"varint,2,opt,name=gate_port_id,json=gatePortId,proto3" json:"gate_port_id,omitempty"`
	Channel    int32                `protobuf:"varint,3,opt,name=channel,proto3" json:"channel,omitempty"`
	NoteNo     int32                `protobuf:"varint,4,opt,name=note_no,json=noteNo,proto3" json:"note_no,omitempty"`
}

func (x *GateConnection) Reset() {
	*x = GateConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GateConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GateConnection) ProtoMessage() {}

func (x *GateConnection) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GateConnection.ProtoReflect.Descriptor instead.
func (*GateConnection) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{59}
}

func (x *GateConnection) GetProcessor() *ProcessorIdentifier {
	if x != nil {
		return x.Processor
	}
	return nil
}

func (x *GateConnection) GetGatePortId() int32 {
	if x != nil {
		return x.GatePortId
	}
	return 0
}

func (x *GateConnection) GetChannel() int32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

func (x *GateConnection) GetNoteNo() int32 {
	if x != nil {
		return x.NoteNo
	}
	return 0
}

type GateConnectionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connections []*GateConnection `protobuf:"bytes,1,rep,name=connections,proto3" json:"connections,omitempty"`
}

func (x *GateConnectionList) Reset() {
	*x = GateConnectionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GateConnectionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GateConnectionList) ProtoMessage() {}

func (x *GateConnectionList) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GateConnectionList.ProtoReflect.Descriptor instead.
func (*GateConnectionList) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{60}
}

func (x *GateConnectionList) GetConnections() []*GateConnection {
	if x != nil {
		return x.Connections
	}
	return nil
}

type MidiKbdConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Track   *TrackIdentifier `protobuf:"bytes,1,opt,name=track,proto3" json:"track,omitempty"`
	Channel *MidiChannel     `protobuf:"bytes,2,opt,name=channel,proto3" json:"channel,omitempty"`
	Port    int32            `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	RawMidi bool             `protobuf:"varint,7,opt,name=raw_midi,json=rawMidi,proto3" json:"raw_midi,omitempty"`
}

func (x *MidiKbdConnection) Reset() {
	*x = MidiKbdConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MidiKbdConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MidiKbdConnection) ProtoMessage() {}

func (x *MidiKbdConnection) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MidiKbdConnection.ProtoReflect.Descriptor instead.
func (*MidiKbdConnection) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{61}
}

func (x *MidiKbdConnection) GetTrack() *TrackIdentifier {
	if x != nil {
		return x.Track
	}
	return nil
}

func (x *MidiKbdConnection) GetChannel() *MidiChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *MidiKbdConnection) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *MidiKbdConnection) GetRawMidi() bool {
	if x != nil {
		return x.RawMidi
	}
	return false
}

type MidiKbdConnectionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connections []*MidiKbdConnection `protobuf:"bytes,1,rep,name=connections,proto3" json:"connections,omitempty"`
}

func (x *MidiKbdConnectionList) Reset() {
	*x = MidiKbdConnectionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MidiKbdConnectionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MidiKbdConnectionList) ProtoMessage() {}

func (x *MidiKbdConnectionList) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MidiKbdConnectionList.ProtoReflect.Descriptor instead.
func (*MidiKbdConnectionList) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{62}
}

func (x *MidiKbdConnectionList) GetConnections() []*MidiKbdConnection {
	if x != nil {
		return x.Connections
	}
	return nil
}

type MidiCCConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parameter    *ParameterIdentifier `protobuf:"bytes,1,opt,name=parameter,proto3" json:"parameter,omitempty"`
	Channel      *MidiChannel         `protobuf:"bytes,2,opt,name=channel,proto3" json:"channel,omitempty"`
	Port         int32                `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	CcNumber     int32                `protobuf:"varint,4,opt,name=cc_number,json=ccNumber,proto3" json:"cc_number,omitempty"`
	MinRange     float32              `protobuf:"fixed32,5,opt,name=min_range,json=minRange,proto3" json:"min_range,omitempty"`
	MaxRange     float32              `protobuf:"fixed32,6,opt,name=max_range,json=maxRange,proto3" json:"max_range,omitempty"`
	RelativeMode bool                 `protobuf:"varint,7,opt,name=relative_mode,json=relativeMode,proto3" json:"relative_mode,omitempty"`
}

func (x *MidiCCConnection) Reset() {
	*x = MidiCCConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MidiCCConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MidiCCConnection) ProtoMessage() {}

func (x *MidiCCConnection) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MidiCCConnection.ProtoReflect.Descriptor instead.
func (*MidiCCConnection) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{63}
}

func (x *MidiCCConnection) GetParameter() *ParameterIdentifier {
	if x != nil {
		return x.Parameter
	}
	return nil
}

func (x *MidiCCConnection) GetChannel() *MidiChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *MidiCCConnection) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *MidiCCConnection) GetCcNumber() int32 {
	if x != nil {
		return x.CcNumber
	}
	return 0
}

func (x *MidiCCConnection) GetMinRange() float32 {
	if x != nil {
		return x.MinRange
	}
	return 0
}

func (x *MidiCCConnection) GetMaxRange() float32 {
	if x != nil {
		return x.MaxRange
	}
	return 0
}

func (x *MidiCCConnection) GetRelativeMode() bool {
	if x != nil {
		return x.RelativeMode
	}
	return false
}

type MidiCCConnectionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connections []*MidiCCConnection `protobuf:"bytes,1,rep,name=connections,proto3" json:"connections,omitempty"`
}

func (x *MidiCCConnectionList) Reset() {
	*x = MidiCCConnectionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MidiCCConnectionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MidiCCConnectionList) ProtoMessage() {}

func (x *MidiCCConnectionList) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MidiCCConnectionList.ProtoReflect.Descriptor instead.
func (*MidiCCConnectionList) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{64}
}

func (x *MidiCCConnectionList) GetConnections() []*MidiCCConnection {
	if x != nil {
		return x.Connections
	}
	return nil
}

type MidiPCConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Processor *ProcessorIdentifier `protobuf:"bytes,1,opt,name=processor,proto3" json:"processor,omitempty"`
	Channel   *MidiChannel         `protobuf:"bytes,2,opt,name=channel,proto3" json:"channel,omitempty"`
	Port      int32                `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *MidiPCConnection) Reset() {
	*x = MidiPCConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MidiPCConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MidiPCConnection) ProtoMessage() {}

func (x *MidiPCConnection) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MidiPCConnection.ProtoReflect.Descriptor instead.
func (*MidiPCConnection) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{65}
}

func (x *MidiPCConnection) GetProcessor() *ProcessorIdentifier {
	if x != nil {
		return x.Processor
	}
	return nil
}

func (x *MidiPCConnection) GetChannel() *MidiChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *MidiPCConnection) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type MidiPCConnectionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connections []*MidiPCConnection `protobuf:"bytes,1,rep,name=connections,proto3" json:"connections,omitempty"`
}

func (x *MidiPCConnectionList) Reset() {
	*x = MidiPCConnectionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MidiPCConnectionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MidiPCConnectionList) ProtoMessage() {}

func (x *MidiPCConnectionList) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MidiPCConnectionList.ProtoReflect.Descriptor instead.
func (*MidiPCConnectionList) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{66}
}

func (x *MidiPCConnectionList) GetConnections() []*MidiPCConnection {
	if x != nil {
		return x.Connections
	}
	return nil
}

type MidiClockSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port    int32 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	Enabled bool  `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *MidiClockSetRequest) Reset() {
	*x = MidiClockSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MidiClockSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MidiClockSetRequest) ProtoMessage() {}

func (x *MidiClockSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MidiClockSetRequest.ProtoReflect.Descriptor instead.
func (*MidiClockSetRequest) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{67}
}

func (x *MidiClockSetRequest) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *MidiClockSetRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type OscParameterOutputList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path []string `protobuf:"bytes,1,rep,name=path,proto3" json:"path,omitempty"`
}

func (x *OscParameterOutputList) Reset() {
	*x = OscParameterOutputList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OscParameterOutputList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OscParameterOutputList) ProtoMessage() {}

func (x *OscParameterOutputList) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OscParameterOutputList.ProtoReflect.Descriptor instead.
func (*OscParameterOutputList) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{68}
}

func (x *OscParameterOutputList) GetPath() []string {
	if x != nil {
		return x.Path
	}
	return nil
}

type TransportUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Transport:
	//
	//	*TransportUpdate_Tempo
	//	*TransportUpdate_PlayingMode
	//	*TransportUpdate_SyncMode
	//	*TransportUpdate_TimeSignature
	Transport isTransportUpdate_Transport `protobuf_oneof:"Transport"`
}

func (x *TransportUpdate) Reset() {
	*x = TransportUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransportUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransportUpdate) ProtoMessage() {}

func (x *TransportUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransportUpdate.ProtoReflect.Descriptor instead.
func (*TransportUpdate) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{69}
}

func (m *TransportUpdate) GetTransport() isTransportUpdate_Transport {
	if m != nil {
		return m.Transport
	}
	return nil
}

func (x *TransportUpdate) GetTempo() float32 {
	if x, ok := x.GetTransport().(*TransportUpdate_Tempo); ok {
		return x.Tempo
	}
	return 0
}

func (x *TransportUpdate) GetPlayingMode() *PlayingMode {
	if x, ok := x.GetTransport().(*TransportUpdate_PlayingMode); ok {
		return x.PlayingMode
	}
	return nil
}

func (x *TransportUpdate) GetSyncMode() *SyncMode {
	if x, ok := x.GetTransport().(*TransportUpdate_SyncMode); ok {
		return x.SyncMode
	}
	return nil
}

func (x *TransportUpdate) GetTimeSignature() *TimeSignature {
	if x, ok := x.GetTransport().(*TransportUpdate_TimeSignature); ok {
		return x.TimeSignature
	}
	return nil
}

type isTransportUpdate_Transport interface {
	isTransportUpdate_Transport()
}

type TransportUpdate_Tempo struct {
	Tempo float32 `protobuf:"fixed32,1,opt,name=tempo,proto3,oneof"`
}

type TransportUpdate_PlayingMode struct {
	PlayingMode *PlayingMode `protobuf:"bytes,2,opt,name=playing_mode,json=playingMode,proto3,oneof"`
}

type TransportUpdate_SyncMode struct {
	SyncMode *SyncMode `protobuf:"bytes,3,opt,name=sync_mode,json=syncMode,proto3,oneof"`
}

type TransportUpdate_TimeSignature struct {
	TimeSignature *TimeSignature `protobuf:"bytes,4,opt,name=time_signature,json=timeSignature,proto3,oneof"`
}

func (*TransportUpdate_Tempo) isTransportUpdate_Transport() {}

func (*TransportUpdate_PlayingMode) isTransportUpdate_Transport() {}

func (*TransportUpdate_SyncMode) isTransportUpdate_Transport() {}

func (*TransportUpdate_TimeSignature) isTransportUpdate_Transport() {}

type TrackUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action TrackUpdate_Action `protobuf:"varint,1,opt,name=action,proto3,enum=sushi_rpc.TrackUpdate_Action" json:"action,omitempty"`
	Track  *TrackIdentifier   `protobuf:"bytes,2,opt,name=track,proto3" json:"track,omitempty"`
}

func (x *TrackUpdate) Reset() {
	*x = TrackUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackUpdate) ProtoMessage() {}

func (x *TrackUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackUpdate.ProtoReflect.Descriptor instead.
func (*TrackUpdate) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{70}
}

func (x *TrackUpdate) GetAction() TrackUpdate_Action {
	if x != nil {
		return x.Action
	}
	return TrackUpdate_DUMMY
}

func (x *TrackUpdate) GetTrack() *TrackIdentifier {
	if x != nil {
		return x.Track
	}
	return nil
}

type ProcessorUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action      ProcessorUpdate_Action `protobuf:"varint,1,opt,name=action,proto3,enum=sushi_rpc.ProcessorUpdate_Action" json:"action,omitempty"`
	Processor   *ProcessorIdentifier   `protobuf:"bytes,2,opt,name=processor,proto3" json:"processor,omitempty"`
	ParentTrack *TrackIdentifier       `protobuf:"bytes,3,opt,name=parent_track,json=parentTrack,proto3" json:"parent_track,omitempty"`
}

func (x *ProcessorUpdate) Reset() {
	*x = ProcessorUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessorUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessorUpdate) ProtoMessage() {}

func (x *ProcessorUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessorUpdate.ProtoReflect.Descriptor instead.
func (*ProcessorUpdate) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{71}
}

func (x *ProcessorUpdate) GetAction() ProcessorUpdate_Action {
	if x != nil {
		return x.Action
	}
	return ProcessorUpdate_DUMMY
}

func (x *ProcessorUpdate) GetProcessor() *ProcessorIdentifier {
	if x != nil {
		return x.Processor
	}
	return nil
}

func (x *ProcessorUpdate) GetParentTrack() *TrackIdentifier {
	if x != nil {
		return x.ParentTrack
	}
	return nil
}

type MidiKbdConnectionState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Track   string       `protobuf:"bytes,1,opt,name=track,proto3" json:"track,omitempty"`
	Channel *MidiChannel `protobuf:"bytes,2,opt,name=channel,proto3" json:"channel,omitempty"`
	Port    int32        `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	RawMidi bool         `protobuf:"varint,7,opt,name=raw_midi,json=rawMidi,proto3" json:"raw_midi,omitempty"`
}

func (x *MidiKbdConnectionState) Reset() {
	*x = MidiKbdConnectionState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MidiKbdConnectionState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MidiKbdConnectionState) ProtoMessage() {}

func (x *MidiKbdConnectionState) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MidiKbdConnectionState.ProtoReflect.Descriptor instead.
func (*MidiKbdConnectionState) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{72}
}

func (x *MidiKbdConnectionState) GetTrack() string {
	if x != nil {
		return x.Track
	}
	return ""
}

func (x *MidiKbdConnectionState) GetChannel() *MidiChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *MidiKbdConnectionState) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *MidiKbdConnectionState) GetRawMidi() bool {
	if x != nil {
		return x.RawMidi
	}
	return false
}

type MidiCCConnectionState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Processor    string               `protobuf:"bytes,1,opt,name=processor,proto3" json:"processor,omitempty"`
	Parameter    *ParameterIdentifier `protobuf:"bytes,2,opt,name=parameter,proto3" json:"parameter,omitempty"`
	Channel      *MidiChannel         `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	Port         int32                `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	CcNumber     int32                `protobuf:"varint,5,opt,name=cc_number,json=ccNumber,proto3" json:"cc_number,omitempty"`
	MinRange     float32              `protobuf:"fixed32,6,opt,name=min_range,json=minRange,proto3" json:"min_range,omitempty"`
	MaxRange     float32              `protobuf:"fixed32,7,opt,name=max_range,json=maxRange,proto3" json:"max_range,omitempty"`
	RelativeMode bool                 `protobuf:"varint,8,opt,name=relative_mode,json=relativeMode,proto3" json:"relative_mode,omitempty"`
}

func (x *MidiCCConnectionState) Reset() {
	*x = MidiCCConnectionState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MidiCCConnectionState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MidiCCConnectionState) ProtoMessage() {}

func (x *MidiCCConnectionState) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MidiCCConnectionState.ProtoReflect.Descriptor instead.
func (*MidiCCConnectionState) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{73}
}

func (x *MidiCCConnectionState) GetProcessor() string {
	if x != nil {
		return x.Processor
	}
	return ""
}

func (x *MidiCCConnectionState) GetParameter() *ParameterIdentifier {
	if x != nil {
		return x.Parameter
	}
	return nil
}

func (x *MidiCCConnectionState) GetChannel() *MidiChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *MidiCCConnectionState) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *MidiCCConnectionState) GetCcNumber() int32 {
	if x != nil {
		return x.CcNumber
	}
	return 0
}

func (x *MidiCCConnectionState) GetMinRange() float32 {
	if x != nil {
		return x.MinRange
	}
	return 0
}

func (x *MidiCCConnectionState) GetMaxRange() float32 {
	if x != nil {
		return x.MaxRange
	}
	return 0
}

func (x *MidiCCConnectionState) GetRelativeMode() bool {
	if x != nil {
		return x.RelativeMode
	}
	return false
}

type MidiPCConnectionState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Processor string       `protobuf:"bytes,1,opt,name=processor,proto3" json:"processor,omitempty"`
	Channel   *MidiChannel `protobuf:"bytes,2,opt,name=channel,proto3" json:"channel,omitempty"`
	Port      int32        `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *MidiPCConnectionState) Reset() {
	*x = MidiPCConnectionState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MidiPCConnectionState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MidiPCConnectionState) ProtoMessage() {}

func (x *MidiPCConnectionState) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MidiPCConnectionState.ProtoReflect.Descriptor instead.
func (*MidiPCConnectionState) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{74}
}

func (x *MidiPCConnectionState) GetProcessor() string {
	if x != nil {
		return x.Processor
	}
	return ""
}

func (x *MidiPCConnectionState) GetChannel() *MidiChannel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *MidiPCConnectionState) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type MidiState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inputs               int32                     `protobuf:"varint,1,opt,name=inputs,proto3" json:"inputs,omitempty"`
	Outputs              int32                     `protobuf:"varint,2,opt,name=outputs,proto3" json:"outputs,omitempty"`
	KbdInputConnections  []*MidiKbdConnectionState `protobuf:"bytes,3,rep,name=kbd_input_connections,json=kbdInputConnections,proto3" json:"kbd_input_connections,omitempty"`
	KbdOutputConnections []*MidiKbdConnectionState `protobuf:"bytes,4,rep,name=kbd_output_connections,json=kbdOutputConnections,proto3" json:"kbd_output_connections,omitempty"`
	CcConnections        []*MidiCCConnectionState  `protobuf:"bytes,5,rep,name=cc_connections,json=ccConnections,proto3" json:"cc_connections,omitempty"`
	PcConnections        []*MidiPCConnectionState  `protobuf:"bytes,6,rep,name=pc_connections,json=pcConnections,proto3" json:"pc_connections,omitempty"`
	EnabledClockOutputs  []int32                   `protobuf:"varint,7,rep,packed,name=enabled_clock_outputs,json=enabledClockOutputs,proto3" json:"enabled_clock_outputs,omitempty"`
}

func (x *MidiState) Reset() {
	*x = MidiState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MidiState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MidiState) ProtoMessage() {}

func (x *MidiState) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MidiState.ProtoReflect.Descriptor instead.
func (*MidiState) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{75}
}

func (x *MidiState) GetInputs() int32 {
	if x != nil {
		return x.Inputs
	}
	return 0
}

func (x *MidiState) GetOutputs() int32 {
	if x != nil {
		return x.Outputs
	}
	return 0
}

func (x *MidiState) GetKbdInputConnections() []*MidiKbdConnectionState {
	if x != nil {
		return x.KbdInputConnections
	}
	return nil
}

func (x *MidiState) GetKbdOutputConnections() []*MidiKbdConnectionState {
	if x != nil {
		return x.KbdOutputConnections
	}
	return nil
}

func (x *MidiState) GetCcConnections() []*MidiCCConnectionState {
	if x != nil {
		return x.CcConnections
	}
	return nil
}

func (x *MidiState) GetPcConnections() []*MidiPCConnectionState {
	if x != nil {
		return x.PcConnections
	}
	return nil
}

func (x *MidiState) GetEnabledClockOutputs() []int32 {
	if x != nil {
		return x.EnabledClockOutputs
	}
	return nil
}

type OscParameterState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Processor    string  `protobuf:"bytes,1,opt,name=processor,proto3" json:"processor,omitempty"`
	ParameterIds []int32 `protobuf:"varint,2,rep,packed,name=parameter_ids,json=parameterIds,proto3" json:"parameter_ids,omitempty"`
}

func (x *OscParameterState) Reset() {
	*x = OscParameterState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OscParameterState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OscParameterState) ProtoMessage() {}

func (x *OscParameterState) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OscParameterState.ProtoReflect.Descriptor instead.
func (*OscParameterState) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{76}
}

func (x *OscParameterState) GetProcessor() string {
	if x != nil {
		return x.Processor
	}
	return ""
}

func (x *OscParameterState) GetParameterIds() []int32 {
	if x != nil {
		return x.ParameterIds
	}
	return nil
}

type OscState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableAllProcessorOutputs bool                 `protobuf:"varint,1,opt,name=enable_all_processor_outputs,json=enableAllProcessorOutputs,proto3" json:"enable_all_processor_outputs,omitempty"`
	EnabledProcessorOutputs   []*OscParameterState `protobuf:"bytes,2,rep,name=enabled_processor_outputs,json=enabledProcessorOutputs,proto3" json:"enabled_processor_outputs,omitempty"`
}

func (x *OscState) Reset() {
	*x = OscState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OscState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OscState) ProtoMessage() {}

func (x *OscState) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OscState.ProtoReflect.Descriptor instead.
func (*OscState) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{77}
}

func (x *OscState) GetEnableAllProcessorOutputs() bool {
	if x != nil {
		return x.EnableAllProcessorOutputs
	}
	return false
}

func (x *OscState) GetEnabledProcessorOutputs() []*OscParameterState {
	if x != nil {
		return x.EnabledProcessorOutputs
	}
	return nil
}

type TrackAudioConnectionState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Track         string `protobuf:"bytes,1,opt,name=track,proto3" json:"track,omitempty"`
	TrackChannel  int32  `protobuf:"varint,2,opt,name=track_channel,json=trackChannel,proto3" json:"track_channel,omitempty"`
	EngineChannel int32  `protobuf:"varint,3,opt,name=engine_channel,json=engineChannel,proto3" json:"engine_channel,omitempty"`
}

func (x *TrackAudioConnectionState) Reset() {
	*x = TrackAudioConnectionState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackAudioConnectionState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackAudioConnectionState) ProtoMessage() {}

func (x *TrackAudioConnectionState) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackAudioConnectionState.ProtoReflect.Descriptor instead.
func (*TrackAudioConnectionState) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{78}
}

func (x *TrackAudioConnectionState) GetTrack() string {
	if x != nil {
		return x.Track
	}
	return ""
}

func (x *TrackAudioConnectionState) GetTrackChannel() int32 {
	if x != nil {
		return x.TrackChannel
	}
	return 0
}

func (x *TrackAudioConnectionState) GetEngineChannel() int32 {
	if x != nil {
		return x.EngineChannel
	}
	return 0
}

type EngineState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleRate          float32                      `protobuf:"fixed32,1,opt,name=sample_rate,json=sampleRate,proto3" json:"sample_rate,omitempty"`
	Tempo               float32                      `protobuf:"fixed32,2,opt,name=tempo,proto3" json:"tempo,omitempty"`
	PlayingMode         *PlayingMode                 `protobuf:"bytes,3,opt,name=playing_mode,json=playingMode,proto3" json:"playing_mode,omitempty"`
	SyncMode            *SyncMode                    `protobuf:"bytes,4,opt,name=sync_mode,json=syncMode,proto3" json:"sync_mode,omitempty"`
	TimeSignature       *TimeSignature               `protobuf:"bytes,5,opt,name=time_signature,json=timeSignature,proto3" json:"time_signature,omitempty"`
	ClipDetectionInput  bool                         `protobuf:"varint,6,opt,name=clip_detection_input,json=clipDetectionInput,proto3" json:"clip_detection_input,omitempty"`
	ClipDetectionOutput bool                         `protobuf:"varint,7,opt,name=clip_detection_output,json=clipDetectionOutput,proto3" json:"clip_detection_output,omitempty"`
	MasterLimiter       bool                         `protobuf:"varint,8,opt,name=master_limiter,json=masterLimiter,proto3" json:"master_limiter,omitempty"`
	UsedAudioInputs     int32                        `protobuf:"varint,9,opt,name=used_audio_inputs,json=usedAudioInputs,proto3" json:"used_audio_inputs,omitempty"`
	UsedAudioOutputs    int32                        `protobuf:"varint,10,opt,name=used_audio_outputs,json=usedAudioOutputs,proto3" json:"used_audio_outputs,omitempty"`
	InputConnections    []*TrackAudioConnectionState `protobuf:"bytes,11,rep,name=input_connections,json=inputConnections,proto3" json:"input_connections,omitempty"`
	OutputConnections   []*TrackAudioConnectionState `protobuf:"bytes,12,rep,name=output_connections,json=outputConnections,proto3" json:"output_connections,omitempty"`
}

func (x *EngineState) Reset() {
	*x = EngineState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EngineState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EngineState) ProtoMessage() {}

func (x *EngineState) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EngineState.ProtoReflect.Descriptor instead.
func (*EngineState) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{79}
}

func (x *EngineState) GetSampleRate() float32 {
	if x != nil {
		return x.SampleRate
	}
	return 0
}

func (x *EngineState) GetTempo() float32 {
	if x != nil {
		return x.Tempo
	}
	return 0
}

func (x *EngineState) GetPlayingMode() *PlayingMode {
	if x != nil {
		return x.PlayingMode
	}
	return nil
}

func (x *EngineState) GetSyncMode() *SyncMode {
	if x != nil {
		return x.SyncMode
	}
	return nil
}

func (x *EngineState) GetTimeSignature() *TimeSignature {
	if x != nil {
		return x.TimeSignature
	}
	return nil
}

func (x *EngineState) GetClipDetectionInput() bool {
	if x != nil {
		return x.ClipDetectionInput
	}
	return false
}

func (x *EngineState) GetClipDetectionOutput() bool {
	if x != nil {
		return x.ClipDetectionOutput
	}
	return false
}

func (x *EngineState) GetMasterLimiter() bool {
	if x != nil {
		return x.MasterLimiter
	}
	return false
}

func (x *EngineState) GetUsedAudioInputs() int32 {
	if x != nil {
		return x.UsedAudioInputs
	}
	return 0
}

func (x *EngineState) GetUsedAudioOutputs() int32 {
	if x != nil {
		return x.UsedAudioOutputs
	}
	return 0
}

func (x *EngineState) GetInputConnections() []*TrackAudioConnectionState {
	if x != nil {
		return x.InputConnections
	}
	return nil
}

func (x *EngineState) GetOutputConnections() []*TrackAudioConnectionState {
	if x != nil {
		return x.OutputConnections
	}
	return nil
}

type PluginClass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Label string          `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Uid   string          `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	Path  string          `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	Type  *PluginType     `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	State *ProcessorState `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *PluginClass) Reset() {
	*x = PluginClass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginClass) ProtoMessage() {}

func (x *PluginClass) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginClass.ProtoReflect.Descriptor instead.
func (*PluginClass) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{80}
}

func (x *PluginClass) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PluginClass) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *PluginClass) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *PluginClass) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *PluginClass) GetType() *PluginType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *PluginClass) GetState() *ProcessorState {
	if x != nil {
		return x.State
	}
	return nil
}

type TrackState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Label      string          `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Channels   int32           `protobuf:"varint,3,opt,name=channels,proto3" json:"channels,omitempty"`
	Buses      int32           `protobuf:"varint,4,opt,name=buses,proto3" json:"buses,omitempty"`
	Type       *TrackType      `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	TrackState *ProcessorState `protobuf:"bytes,6,opt,name=track_state,json=trackState,proto3" json:"track_state,omitempty"`
	Processors []*PluginClass  `protobuf:"bytes,7,rep,name=processors,proto3" json:"processors,omitempty"`
}

func (x *TrackState) Reset() {
	*x = TrackState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackState) ProtoMessage() {}

func (x *TrackState) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackState.ProtoReflect.Descriptor instead.
func (*TrackState) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{81}
}

func (x *TrackState) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TrackState) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *TrackState) GetChannels() int32 {
	if x != nil {
		return x.Channels
	}
	return 0
}

func (x *TrackState) GetBuses() int32 {
	if x != nil {
		return x.Buses
	}
	return 0
}

func (x *TrackState) GetType() *TrackType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *TrackState) GetTrackState() *ProcessorState {
	if x != nil {
		return x.TrackState
	}
	return nil
}

func (x *TrackState) GetProcessors() []*PluginClass {
	if x != nil {
		return x.Processors
	}
	return nil
}

type SessionState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SushiInfo   *SushiBuildInfo `protobuf:"bytes,1,opt,name=sushi_info,json=sushiInfo,proto3" json:"sushi_info,omitempty"`
	SaveDate    string          `protobuf:"bytes,2,opt,name=save_date,json=saveDate,proto3" json:"save_date,omitempty"`
	OscState    *OscState       `protobuf:"bytes,3,opt,name=osc_state,json=oscState,proto3" json:"osc_state,omitempty"`
	MidiState   *MidiState      `protobuf:"bytes,4,opt,name=midi_state,json=midiState,proto3" json:"midi_state,omitempty"`
	EngineState *EngineState    `protobuf:"bytes,5,opt,name=engine_state,json=engineState,proto3" json:"engine_state,omitempty"`
	Tracks      []*TrackState   `protobuf:"bytes,6,rep,name=tracks,proto3" json:"tracks,omitempty"`
}

func (x *SessionState) Reset() {
	*x = SessionState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sushi_rpc_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionState) ProtoMessage() {}

func (x *SessionState) ProtoReflect() protoreflect.Message {
	mi := &file_sushi_rpc_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionState.ProtoReflect.Descriptor instead.
func (*SessionState) Descriptor() ([]byte, []int) {
	return file_sushi_rpc_proto_rawDescGZIP(), []int{82}
}

func (x *SessionState) GetSushiInfo() *SushiBuildInfo {
	if x != nil {
		return x.SushiInfo
	}
	return nil
}

func (x *SessionState) GetSaveDate() string {
	if x != nil {
		return x.SaveDate
	}
	return ""
}

func (x *SessionState) GetOscState() *OscState {
	if x != nil {
		return x.OscState
	}
	return nil
}

func (x *SessionState) GetMidiState() *MidiState {
	if x != nil {
		return x.MidiState
	}
	return nil
}

func (x *SessionState) GetEngineState() *EngineState {
	if x != nil {
		return x.EngineState
	}
	return nil
}

func (x *SessionState) GetTracks() []*TrackState {
	if x != nil {
		return x.Tracks
	}
	return nil
}

var File_sushi_rpc_proto protoreflect.FileDescriptor

var file_sushi_rpc_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x22, 0x12, 0x0a, 0x10,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x29, 0x0a, 0x11, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x27, 0x0a, 0x0f, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x49, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x28, 0x0a, 0x10, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2a,
	0x0a, 0x12, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x46, 0x0a, 0x11, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x45, 0x0a, 0x10, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x68, 0x61, 0x73, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xbb, 0x01, 0x0a, 0x0e, 0x53, 0x75,
	0x73, 0x68, 0x69, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0x21, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x25, 0x0a, 0x13, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x5b, 0x0a, 0x13, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x58,
	0x0a, 0x12, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x64, 0x22, 0x73, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f,
	0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x2f, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x55, 0x4d, 0x4d, 0x59, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x42, 0x4f, 0x4f, 0x4c, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4e, 0x54,
	0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x03, 0x22, 0x7a, 0x0a,
	0x0b, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x75, 0x73,
	0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x4d, 0x6f,
	0x64, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x0a,
	0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x55, 0x4d, 0x4d, 0x59, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x50, 0x4c, 0x41, 0x59, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45,
	0x43, 0x4f, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x22, 0x6d, 0x0a, 0x08, 0x53, 0x79, 0x6e,
	0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x79, 0x6e, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x22, 0x33, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x44,
	0x55, 0x4d, 0x4d, 0x59, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e,
	0x41, 0x4c, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x49, 0x44, 0x49, 0x10, 0x02, 0x12, 0x08,
	0x0a, 0x04, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x03, 0x22, 0x4f, 0x0a, 0x0d, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x75, 0x6d,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x75,
	0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x6e, 0x6f, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x65,
	0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x4a, 0x0a, 0x0a, 0x43, 0x70, 0x75,
	0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03,
	0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x03, 0x6d, 0x61, 0x78, 0x22, 0x8b, 0x01, 0x0a, 0x0d, 0x4e, 0x6f, 0x74, 0x65, 0x4f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72,
	0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63,
	0x69, 0x74, 0x79, 0x22, 0x8c, 0x01, 0x0a, 0x0e, 0x4e, 0x6f, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70,
	0x63, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69,
	0x74, 0x79, 0x22, 0x8d, 0x01, 0x0a, 0x15, 0x4e, 0x6f, 0x74, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x74, 0x6f, 0x75, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x05,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x75,
	0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x79, 0x0a, 0x15, 0x4e, 0x6f, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x75, 0x73,
	0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x6d, 0x0a,
	0x09, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x31, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x55, 0x4d, 0x4d, 0x59, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x52, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x52, 0x45,
	0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54, 0x10, 0x03, 0x22, 0xe1, 0x01, 0x0a,
	0x09, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x62, 0x75, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x62, 0x75, 0x73, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63,
	0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x3e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63,
	0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73,
	0x22, 0x3d, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x2c, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x22,
	0x97, 0x01, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4d, 0x0a, 0x11, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x22, 0x2d, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x22, 0x74, 0x0a, 0x1a, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x22, 0x4f, 0x0a,
	0x0b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x45,
	0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x32, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x1a, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f,
	0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x6f, 0x72, 0x12, 0x36, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x22, 0x74, 0x0a, 0x1e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x42, 0x79, 0x70, 0x61, 0x73, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x9c, 0x02, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f,
	0x72, 0x70, 0x63, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12,
	0x38, 0x0a, 0x08, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f,
	0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x89, 0x01, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x75, 0x73, 0x68,
	0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x81, 0x02, 0x0a, 0x0d,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x75,
	0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6d,
	0x69, 0x6e, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0e, 0x6d, 0x61, 0x78, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x4d, 0x0a, 0x11, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x78,
	0x0a, 0x12, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f,
	0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x64, 0x0a, 0x0e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x09, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc6,
	0x01, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70,
	0x63, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x12, 0x29, 0x0a, 0x10, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x6e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74,
	0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x48, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x22, 0x4b, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x75, 0x73, 0x68,
	0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0x60,
	0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x39, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x76, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x7c, 0x0a, 0x0a, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63,
	0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09,
	0x0a, 0x05, 0x44, 0x55, 0x4d, 0x4d, 0x59, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x53, 0x54, 0x32, 0x58,
	0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x53, 0x54, 0x33, 0x58, 0x10, 0x03, 0x12, 0x07, 0x0a,
	0x03, 0x4c, 0x56, 0x32, 0x10, 0x04, 0x22, 0x7e, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0b, 0x61,
	0x64, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x61, 0x64, 0x64, 0x54, 0x6f, 0x42, 0x61, 0x63, 0x6b, 0x12, 0x49, 0x0a, 0x10, 0x62,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70,
	0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x22, 0x44, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x22, 0x46, 0x0a, 0x1a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x62, 0x75, 0x73, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x62, 0x75, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x62,
	0x75, 0x73, 0x65, 0x73, 0x22, 0x2b, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x2c, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0xe9, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x30, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x88, 0x02, 0x0a, 0x14,
	0x4d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f,
	0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x6f, 0x72, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70,
	0x63, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x09, 0x64, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x38, 0x0a, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x88, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63,
	0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12,
	0x30, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x22, 0x60, 0x0a, 0x1e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f,
	0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x22, 0x5e, 0x0a, 0x1d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x22, 0xe7, 0x02, 0x0a, 0x0b, 0x4d, 0x69, 0x64, 0x69, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63,
	0x2e, 0x4d, 0x69, 0x64, 0x69, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x9d, 0x02,
	0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x55, 0x4d,
	0x4d, 0x59, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x49, 0x44, 0x49, 0x5f, 0x43, 0x48, 0x5f,
	0x31, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x49, 0x44, 0x49, 0x5f, 0x43, 0x48, 0x5f, 0x32,
	0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x49, 0x44, 0x49, 0x5f, 0x43, 0x48, 0x5f, 0x33, 0x10,
	0x03, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x49, 0x44, 0x49, 0x5f, 0x43, 0x48, 0x5f, 0x34, 0x10, 0x04,
	0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x49, 0x44, 0x49, 0x5f, 0x43, 0x48, 0x5f, 0x35, 0x10, 0x05, 0x12,
	0x0d, 0x0a, 0x09, 0x4d, 0x49, 0x44, 0x49, 0x5f, 0x43, 0x48, 0x5f, 0x36, 0x10, 0x06, 0x12, 0x0d,
	0x0a, 0x09, 0x4d, 0x49, 0x44, 0x49, 0x5f, 0x43, 0x48, 0x5f, 0x37, 0x10, 0x07, 0x12, 0x0d, 0x0a,
	0x09, 0x4d, 0x49, 0x44, 0x49, 0x5f, 0x43, 0x48, 0x5f, 0x38, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09,
	0x4d, 0x49, 0x44, 0x49, 0x5f, 0x43, 0x48, 0x5f, 0x39, 0x10, 0x09, 0x12, 0x0e, 0x0a, 0x0a, 0x4d,
	0x49, 0x44, 0x49, 0x5f, 0x43, 0x48, 0x5f, 0x31, 0x30, 0x10, 0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x4d,
	0x49, 0x44, 0x49, 0x5f, 0x43, 0x48, 0x5f, 0x31, 0x31, 0x10, 0x0b, 0x12, 0x0e, 0x0a, 0x0a, 0x4d,
	0x49, 0x44, 0x49, 0x5f, 0x43, 0x48, 0x5f, 0x31, 0x32, 0x10, 0x0c, 0x12, 0x0e, 0x0a, 0x0a, 0x4d,
	0x49, 0x44, 0x49, 0x5f, 0x43, 0x48, 0x5f, 0x31, 0x33, 0x10, 0x0d, 0x12, 0x0e, 0x0a, 0x0a, 0x4d,
	0x49, 0x44, 0x49, 0x5f, 0x43, 0x48, 0x5f, 0x31, 0x34, 0x10, 0x0e, 0x12, 0x0e, 0x0a, 0x0a, 0x4d,
	0x49, 0x44, 0x49, 0x5f, 0x43, 0x48, 0x5f, 0x31, 0x35, 0x10, 0x0f, 0x12, 0x0e, 0x0a, 0x0a, 0x4d,
	0x49, 0x44, 0x49, 0x5f, 0x43, 0x48, 0x5f, 0x31, 0x36, 0x10, 0x10, 0x12, 0x10, 0x0a, 0x0c, 0x4d,
	0x49, 0x44, 0x49, 0x5f, 0x43, 0x48, 0x5f, 0x4f, 0x4d, 0x4e, 0x49, 0x10, 0x11, 0x22, 0x8f, 0x01,
	0x0a, 0x0f, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x30, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x05, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22,
	0x53, 0x0a, 0x13, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x75,
	0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x6a, 0x0a, 0x0c, 0x43, 0x76, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f,
	0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x12, 0x1c, 0x0a, 0x0a, 0x63, 0x76, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x76, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x64,
	0x22, 0x4d, 0x0a, 0x10, 0x43, 0x76, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x75, 0x73, 0x68,
	0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x76, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0xa3, 0x01, 0x0a, 0x0e, 0x47, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70,
	0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x12, 0x20, 0x0a, 0x0c, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07,
	0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e,
	0x6f, 0x74, 0x65, 0x4e, 0x6f, 0x22, 0x51, 0x0a, 0x12, 0x47, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa6, 0x01, 0x0a, 0x11, 0x4d, 0x69, 0x64,
	0x69, 0x4b, 0x62, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30,
	0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x12, 0x30, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x69,
	0x64, 0x69, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x6d, 0x69,
	0x64, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x61, 0x77, 0x4d, 0x69, 0x64,
	0x69, 0x22, 0x57, 0x0a, 0x15, 0x4d, 0x69, 0x64, 0x69, 0x4b, 0x62, 0x64, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x69, 0x64, 0x69,
	0x4b, 0x62, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x92, 0x02, 0x0a, 0x10, 0x4d,
	0x69, 0x64, 0x69, 0x43, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x30, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x69, 0x64, 0x69, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x63, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x63, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x08, 0x6d, 0x61, 0x78, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x22,
	0x55, 0x0a, 0x14, 0x4d, 0x69, 0x64, 0x69, 0x43, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73,
	0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x69, 0x64, 0x69, 0x43, 0x43, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x96, 0x01, 0x0a, 0x10, 0x4d, 0x69, 0x64, 0x69, 0x50,
	0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x75, 0x73,
	0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x69, 0x64, 0x69, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22,
	0x55, 0x0a, 0x14, 0x4d, 0x69, 0x64, 0x69, 0x50, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73,
	0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x69, 0x64, 0x69, 0x50, 0x43, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x43, 0x0a, 0x13, 0x4d, 0x69, 0x64, 0x69, 0x43, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x2c, 0x0a, 0x16, 0x4f,
	0x73, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0xea, 0x01, 0x0a, 0x0f, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a,
	0x05, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x05,
	0x74, 0x65, 0x6d, 0x70, 0x6f, 0x12, 0x3b, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x75,
	0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x4d,
	0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70,
	0x63, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x08, 0x73, 0x79,
	0x6e, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xaf, 0x01, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72,
	0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a,
	0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73,
	0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x22,
	0x37, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x55, 0x4d,
	0x4d, 0x59, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x5f, 0x41, 0x44,
	0x44, 0x45, 0x44, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x5f, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x22, 0x8a, 0x02, 0x0a, 0x0f, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73,
	0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x6f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x75, 0x73,
	0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x75,
	0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x22, 0x3f, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x09,
	0x0a, 0x05, 0x44, 0x55, 0x4d, 0x4d, 0x59, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x52, 0x4f,
	0x43, 0x45, 0x53, 0x53, 0x4f, 0x52, 0x5f, 0x41, 0x44, 0x44, 0x45, 0x44, 0x10, 0x01, 0x12, 0x15,
	0x0a, 0x11, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x4f, 0x52, 0x5f, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x44, 0x10, 0x02, 0x22, 0x8f, 0x01, 0x0a, 0x16, 0x4d, 0x69, 0x64, 0x69, 0x4b, 0x62,
	0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x30, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f,
	0x72, 0x70, 0x63, 0x2e, 0x4d, 0x69, 0x64, 0x69, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x72, 0x61, 0x77, 0x5f, 0x6d, 0x69, 0x64, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x72, 0x61, 0x77, 0x4d, 0x69, 0x64, 0x69, 0x22, 0xb5, 0x02, 0x0a, 0x15, 0x4d, 0x69, 0x64, 0x69,
	0x43, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12,
	0x3c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x30, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x69, 0x64, 0x69, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x63, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x63, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x08, 0x6d, 0x61, 0x78, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x22,
	0x7b, 0x0a, 0x15, 0x4d, 0x69, 0x64, 0x69, 0x50, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f,
	0x72, 0x70, 0x63, 0x2e, 0x4d, 0x69, 0x64, 0x69, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xb3, 0x03, 0x0a,
	0x09, 0x4d, 0x69, 0x64, 0x69, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x55, 0x0a, 0x15,
	0x6b, 0x62, 0x64, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x75,
	0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x69, 0x64, 0x69, 0x4b, 0x62, 0x64, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x13,
	0x6b, 0x62, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x57, 0x0a, 0x16, 0x6b, 0x62, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e,
	0x4d, 0x69, 0x64, 0x69, 0x4b, 0x62, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x14, 0x6b, 0x62, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x47, 0x0a, 0x0e,
	0x63, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63,
	0x2e, 0x4d, 0x69, 0x64, 0x69, 0x43, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x63, 0x63, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x47, 0x0a, 0x0e, 0x70, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x69, 0x64, 0x69, 0x50, 0x43,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x0d, 0x70, 0x63, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32,
	0x0a, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x05, 0x52, 0x13, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x73, 0x22, 0x56, 0x0a, 0x11, 0x4f, 0x73, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x08, 0x4f,
	0x73, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x5f,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x58, 0x0a, 0x19, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x5f, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x75,
	0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x73, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x17, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x73, 0x22, 0x7d, 0x0a, 0x19, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x22, 0x81, 0x05, 0x0a, 0x0b, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x05, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x12, 0x39, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79,
	0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x69,
	0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x73, 0x79, 0x6e,
	0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6c, 0x69, 0x70, 0x5f, 0x64,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x63, 0x6c, 0x69, 0x70, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6c, 0x69, 0x70,
	0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x63, 0x6c, 0x69, 0x70, 0x44, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x75, 0x73, 0x65, 0x64, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12,
	0x2c, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x75, 0x73, 0x65,
	0x64, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x51, 0x0a,
	0x11, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x10,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x53, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73,
	0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x11, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xb9, 0x01, 0x0a, 0x0b, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x2f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x22, 0x86, 0x02, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x75, 0x73, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x62, 0x75, 0x73, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x75, 0x73,
	0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x75,
	0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72,
	0x70, 0x63, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0a,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x22, 0xb6, 0x02, 0x0a, 0x0c, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x73,
	0x75, 0x73, 0x68, 0x69, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x75, 0x73, 0x68,
	0x69, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x73, 0x75, 0x73, 0x68,
	0x69, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x61, 0x76, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x6f, 0x73, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70,
	0x63, 0x2e, 0x4f, 0x73, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x6f, 0x73, 0x63, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x6d, 0x69, 0x64, 0x69, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x69, 0x64, 0x69, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09,
	0x6d, 0x69, 0x64, 0x69, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x0c, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63,
	0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x06, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x73, 0x32, 0xde, 0x02, 0x0a, 0x10, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53,
	0x75, 0x73, 0x68, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x73, 0x75,
	0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56,
	0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1d, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0c, 0x47, 0x65, 0x74,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68,
	0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x19, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x75, 0x73, 0x68, 0x69, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1a, 0x2e,
	0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69,
	0x63, 0x49, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68,
	0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1a, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72,
	0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x49, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x00, 0x32, 0xa7, 0x05, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x2e,
	0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69,
	0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1c, 0x2e, 0x73, 0x75, 0x73,
	0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x2e, 0x73,
	0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63,
	0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e, 0x73, 0x75, 0x73, 0x68,
	0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64,
	0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0x13, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x6e, 0x63,
	0x4d, 0x6f, 0x64, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1b, 0x2e, 0x73, 0x75, 0x73,
	0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f,
	0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x18, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f,
	0x72, 0x70, 0x63, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x12,
	0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1c, 0x2e, 0x73,
	0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x08,
	0x53, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x12, 0x1c, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72,
	0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79,
	0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f,
	0x72, 0x70, 0x63, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x1a,
	0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x41,
	0x0a, 0x0b, 0x53, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x13, 0x2e,
	0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x6f,
	0x64, 0x65, 0x1a, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x00, 0x12, 0x4b, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x18, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70,
	0x63, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x1a,
	0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x32, 0x8d,
	0x05, 0x0a, 0x10, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67,
	0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70,
	0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x69, 0x6e,
	0x67, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68,
	0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72,
	0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68,
	0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x15, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72,
	0x70, 0x63, 0x2e, 0x43, 0x70, 0x75, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x00, 0x12,
	0x46, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x1a, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x15,
	0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x70, 0x75, 0x54, 0x69,
	0x6d, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1e,
	0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x15,
	0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x70, 0x75, 0x54, 0x69,
	0x6d, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1b, 0x2e, 0x73, 0x75, 0x73,
	0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f,
	0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f,
	0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1a, 0x2e, 0x73, 0x75,
	0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f,
	0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x1e, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a,
	0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x32, 0xf3,
	0x03, 0x0a, 0x12, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x64, 0x4e, 0x6f, 0x74,
	0x65, 0x4f, 0x6e, 0x12, 0x18, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e,
	0x4e, 0x6f, 0x74, 0x65, 0x4f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e,
	0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69,
	0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0b,
	0x53, 0x65, 0x6e, 0x64, 0x4e, 0x6f, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x12, 0x19, 0x2e, 0x73, 0x75,
	0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72,
	0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x12, 0x53, 0x65, 0x6e, 0x64, 0x4e, 0x6f, 0x74,
	0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x12, 0x20, 0x2e, 0x73, 0x75,
	0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e,
	0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69,
	0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0e,
	0x53, 0x65, 0x6e, 0x64, 0x41, 0x66, 0x74, 0x65, 0x72, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x12, 0x20,
	0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12,
	0x50, 0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x69, 0x74, 0x63, 0x68, 0x42, 0x65, 0x6e, 0x64,
	0x12, 0x20, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x6f, 0x74,
	0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x00, 0x12, 0x51, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e,
	0x4e, 0x6f, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70,
	0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x00, 0x32, 0xcc, 0x0c, 0x0a, 0x14, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x4f, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x73, 0x12, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1c,
	0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x47,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x1b,
	0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x18, 0x2e, 0x73, 0x75,
	0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x1d, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70,
	0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1a, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63,
	0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x22, 0x00, 0x12, 0x42, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1a, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x14,
	0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x12, 0x1a, 0x2e, 0x73,
	0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x1c, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x2e, 0x73, 0x75, 0x73,
	0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1e, 0x2e, 0x73, 0x75, 0x73, 0x68,
	0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1e, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a,
	0x18, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x42, 0x79, 0x70, 0x61, 0x73,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72,
	0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72,
	0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x73, 0x75, 0x73,
	0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x19, 0x2e, 0x73, 0x75, 0x73,
	0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x42, 0x79, 0x70, 0x61, 0x73, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x29, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x42, 0x79, 0x70, 0x61, 0x73, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e,
	0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69,
	0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x11,
	0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x23, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72,
	0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x12, 0x1d, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x00, 0x12, 0x5b, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x62, 0x75, 0x73, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x25, 0x2e, 0x73, 0x75, 0x73, 0x68,
	0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x62, 0x75, 0x73, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12,
	0x51, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x12, 0x20, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x00, 0x12, 0x53, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x21, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70,
	0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x4f, 0x6e, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x12, 0x21, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63,
	0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x14, 0x4d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x4f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x1f, 0x2e, 0x73, 0x75,
	0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73,
	0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63,
	0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x18, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x46, 0x72,
	0x6f, 0x6d, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x21, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f,
	0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x75, 0x73,
	0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f,
	0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0b, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x1a, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x1a, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63,
	0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x00, 0x32, 0xea, 0x03, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x5c, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x1e, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f,
	0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x1c, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f,
	0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x2e, 0x73, 0x75, 0x73, 0x68,
	0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x1d, 0x2e, 0x73, 0x75, 0x73, 0x68,
	0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70,
	0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x1d, 0x2e, 0x73,
	0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1e, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70,
	0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x1a, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70,
	0x63, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x25, 0x2e, 0x73, 0x75, 0x73,
	0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00,
	0x32, 0xab, 0x09, 0x0a, 0x13, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1a,
	0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x1c, 0x2e, 0x73, 0x75, 0x73,
	0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63,
	0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x1a, 0x1c, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63,
	0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72,
	0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70,
	0x63, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x2e, 0x73, 0x75,
	0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x18, 0x2e, 0x73, 0x75,
	0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x2e, 0x73,
	0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x1c, 0x2e, 0x73,
	0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x49, 0x6e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1e, 0x2e, 0x73, 0x75, 0x73, 0x68,
	0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x1c, 0x2e, 0x73, 0x75, 0x73, 0x68,
	0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x73,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72,
	0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x1d, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72,
	0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x2e, 0x73,
	0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f,
	0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1a, 0x2e, 0x73,
	0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x1e, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x1a, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00,
	0x12, 0x4e, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x1c, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x00,
	0x12, 0x4b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x1a, 0x17, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x52, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1d, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x1a, 0x1d, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x69, 0x63, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x00, 0x12, 0x4b, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70,
	0x63, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x32, 0xf8,
	0x0d, 0x0a, 0x0e, 0x4d, 0x69, 0x64, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x12, 0x4a, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x73, 0x12, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0x1a, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x69, 0x63, 0x49, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12,
	0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1a, 0x2e, 0x73,
	0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63,
	0x49, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x4b, 0x62, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f,
	0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x1a, 0x20, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63,
	0x2e, 0x4d, 0x69, 0x64, 0x69, 0x4b, 0x62, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x4b, 0x62, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72,
	0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0x20, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e,
	0x4d, 0x69, 0x64, 0x69, 0x4b, 0x62, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x43, 0x43, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x1a, 0x1f, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x69, 0x64,
	0x69, 0x43, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x43, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1f, 0x2e, 0x73,
	0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x69, 0x64, 0x69, 0x50, 0x43, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12,
	0x66, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x43, 0x43, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x12, 0x1e, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63,
	0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x1a, 0x1f, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63,
	0x2e, 0x4d, 0x69, 0x64, 0x69, 0x43, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x50, 0x43,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x46, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x1e, 0x2e, 0x73,
	0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x6f, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x1f, 0x2e, 0x73,
	0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x69, 0x64, 0x69, 0x50, 0x43, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12,
	0x56, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x64, 0x69, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1a, 0x2e, 0x73,
	0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63,
	0x49, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x4d, 0x69,
	0x64, 0x69, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x1e, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63,
	0x2e, 0x4d, 0x69, 0x64, 0x69, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63,
	0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4b, 0x62,
	0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x6f, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x1c, 0x2e,
	0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x69, 0x64, 0x69, 0x4b, 0x62,
	0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1b, 0x2e, 0x73, 0x75,
	0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56,
	0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x19, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4b, 0x62, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x72,
	0x6f, 0x6d, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x1c, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f,
	0x72, 0x70, 0x63, 0x2e, 0x4d, 0x69, 0x64, 0x69, 0x4b, 0x62, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70,
	0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x43,
	0x43, 0x54, 0x6f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x73,
	0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x69, 0x64, 0x69, 0x43, 0x43, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68,
	0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x50, 0x43, 0x54, 0x6f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x12, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x69, 0x64,
	0x69, 0x50, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1b, 0x2e,
	0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69,
	0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x12,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4b, 0x62, 0x64, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x1c, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4d,
	0x69, 0x64, 0x69, 0x4b, 0x62, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12,
	0x52, 0x0a, 0x13, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4b, 0x62, 0x64,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1c, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72,
	0x70, 0x63, 0x2e, 0x4d, 0x69, 0x64, 0x69, 0x4b, 0x62, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63,
	0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x43, 0x43, 0x12, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e,
	0x4d, 0x69, 0x64, 0x69, 0x43, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12,
	0x4a, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x43, 0x12,
	0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x69, 0x64, 0x69,
	0x50, 0x43, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1b, 0x2e, 0x73,
	0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63,
	0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x1c, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x43, 0x46, 0x72,
	0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x1e, 0x2e, 0x73, 0x75,
	0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x1b, 0x2e, 0x73, 0x75,
	0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56,
	0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x1c, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x43, 0x46, 0x72, 0x6f,
	0x6d, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x1e, 0x2e, 0x73, 0x75, 0x73,
	0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x1b, 0x2e, 0x73, 0x75, 0x73,
	0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f,
	0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x32, 0xed, 0x07, 0x0a, 0x16, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x12, 0x57, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b,
	0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1e, 0x2e, 0x73, 0x75,
	0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x58, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1e, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70,
	0x63, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f,
	0x72, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x1a, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72,
	0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x1a, 0x1e, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x12, 0x1a, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63,
	0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x1a, 0x1e, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x00, 0x12, 0x57, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x6f, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x12, 0x1a, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1b, 0x2e, 0x73,
	0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63,
	0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x1d, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x1a, 0x2e, 0x73,
	0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0f, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1a, 0x2e, 0x73, 0x75, 0x73,
	0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72,
	0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x10, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1a, 0x2e, 0x73, 0x75, 0x73, 0x68,
	0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70,
	0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x1c, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x41, 0x6c, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x12, 0x1a, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63,
	0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x1a, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12,
	0x5c, 0x0a, 0x1c, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x6c, 0x6c,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12,
	0x1a, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x1b, 0x2e, 0x73, 0x75,
	0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56,
	0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x03, 0x88, 0x02, 0x01, 0x12, 0x5a, 0x0a,
	0x1d, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x6c, 0x6c, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x1a,
	0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x1b, 0x2e, 0x73, 0x75, 0x73,
	0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f,
	0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x32, 0xfb, 0x0f, 0x0a, 0x10, 0x43, 0x76,
	0x47, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x53,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x76, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1a, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70,
	0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x49, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x76, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b,
	0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1a, 0x2e, 0x73, 0x75,
	0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x49,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x43, 0x76, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70,
	0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x1a, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x76, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x00, 0x12, 0x57, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x76, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b,
	0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1b, 0x2e, 0x73, 0x75,
	0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x76, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x1a, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x47, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1d, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70,
	0x63, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x47, 0x61, 0x74, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70,
	0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x1a, 0x1d, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x43, 0x76, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x1e, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x76, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x43, 0x76,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x46, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x1e, 0x2e,
	0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x1b, 0x2e,
	0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x76, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x23,
	0x47, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x12, 0x1e, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x1a, 0x1d, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x46, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x1e, 0x2e, 0x73,
	0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x6f, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x1d, 0x2e, 0x73,
	0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x53, 0x0a,
	0x19, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x43, 0x76, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54,
	0x6f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x17, 0x2e, 0x73, 0x75, 0x73,
	0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x76, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x00, 0x12, 0x56, 0x0a, 0x1c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x43, 0x76, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x12, 0x17, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x76, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1b, 0x2e, 0x73, 0x75,
	0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56,
	0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x1b, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x47, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x6f,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x19, 0x2e, 0x73, 0x75, 0x73, 0x68,
	0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63,
	0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x1e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x47, 0x61,
	0x74, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x19, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70,
	0x63, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12,
	0x4b, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x43, 0x76, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x17, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63,
	0x2e, 0x43, 0x76, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1b, 0x2e,
	0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69,
	0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x12,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x43, 0x76, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x12, 0x17, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x76, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1b, 0x2e, 0x73, 0x75,
	0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56,
	0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x13, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x47, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x19, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1b, 0x2e, 0x73,
	0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63,
	0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x14, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x47, 0x61, 0x74, 0x65, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x12, 0x19, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1b,
	0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a,
	0x22, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x76,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x12, 0x1e, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x1a, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x00, 0x12, 0x64, 0x0a, 0x23, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x41, 0x6c, 0x6c, 0x43, 0x76, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x46, 0x72, 0x6f, 0x6d,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x1e, 0x2e, 0x73, 0x75, 0x73, 0x68,
	0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68,
	0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x24, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x6c, 0x6c, 0x47, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x12, 0x1e, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x1a, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12,
	0x66, 0x0a, 0x25, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x6c, 0x6c,
	0x47, 0x61, 0x74, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x1e, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x32, 0xa7, 0x05, 0x0a, 0x0d, 0x4f, 0x73, 0x63, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x09, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x6e, 0x64, 0x49, 0x50, 0x12, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72,
	0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0x1d, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x1a, 0x1a, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x69, 0x63, 0x49, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x4b,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1a, 0x2e,
	0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69,
	0x63, 0x49, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68,
	0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x21, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72,
	0x70, 0x63, 0x2e, 0x4f, 0x73, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x18, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f,
	0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f,
	0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x19, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x1a, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70,
	0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x1a, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x00, 0x12, 0x4e, 0x0a, 0x10, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70,
	0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x1a, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x00, 0x32, 0xa4, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x0b, 0x53, 0x61, 0x76, 0x65, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72,
	0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0x17, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x00, 0x12, 0x48,
	0x0a, 0x0e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x17, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68,
	0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x32, 0xd1, 0x04, 0x0a, 0x16, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x12, 0x5a, 0x0a, 0x1b, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x54, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x12, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0x1a, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x5b, 0x0a, 0x21, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x45, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x43, 0x70, 0x75, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x12, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63,
	0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x1a, 0x15, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x70,
	0x75, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x00, 0x30, 0x01, 0x12, 0x52, 0x0a, 0x17,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f,
	0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63,
	0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x00, 0x30, 0x01,
	0x12, 0x5a, 0x0a, 0x1b, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12,
	0x1b, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x69, 0x63, 0x56, 0x6f, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1a, 0x2e, 0x73,
	0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x6f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x68, 0x0a, 0x1b,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x73, 0x75,
	0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72,
	0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x64, 0x0a, 0x1a, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x54, 0x6f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63,
	0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x1a, 0x18,
	0x2e, 0x73, 0x75, 0x73, 0x68, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x30, 0x01, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sushi_rpc_proto_rawDescOnce sync.Once
	file_sushi_rpc_proto_rawDescData = file_sushi_rpc_proto_rawDesc
)

func file_sushi_rpc_proto_rawDescGZIP() []byte {
	file_sushi_rpc_proto_rawDescOnce.Do(func() {
		file_sushi_rpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_sushi_rpc_proto_rawDescData)
	})
	return file_sushi_rpc_proto_rawDescData
}

var file_sushi_rpc_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_sushi_rpc_proto_msgTypes = make([]protoimpl.MessageInfo, 83)
var file_sushi_rpc_proto_goTypes = []interface{}{
	(ParameterType_Type)(0),                // 0: sushi_rpc.ParameterType.Type
	(PlayingMode_Mode)(0),                  // 1: sushi_rpc.PlayingMode.Mode
	(SyncMode_Mode)(0),                     // 2: sushi_rpc.SyncMode.Mode
	(TrackType_Type)(0),                    // 3: sushi_rpc.TrackType.Type
	(PluginType_Type)(0),                   // 4: sushi_rpc.PluginType.Type
	(MidiChannel_Channel)(0),               // 5: sushi_rpc.MidiChannel.Channel
	(TrackUpdate_Action)(0),                // 6: sushi_rpc.TrackUpdate.Action
	(ProcessorUpdate_Action)(0),            // 7: sushi_rpc.ProcessorUpdate.Action
	(*GenericVoidValue)(nil),               // 8: sushi_rpc.GenericVoidValue
	(*GenericFloatValue)(nil),              // 9: sushi_rpc.GenericFloatValue
	(*GenericIntValue)(nil),                // 10: sushi_rpc.GenericIntValue
	(*GenericBoolValue)(nil),               // 11: sushi_rpc.GenericBoolValue
	(*GenericStringValue)(nil),             // 12: sushi_rpc.GenericStringValue
	(*OptionalBoolValue)(nil),              // 13: sushi_rpc.OptionalBoolValue
	(*OptionalIntValue)(nil),               // 14: sushi_rpc.OptionalIntValue
	(*SushiBuildInfo)(nil),                 // 15: sushi_rpc.SushiBuildInfo
	(*TrackIdentifier)(nil),                // 16: sushi_rpc.TrackIdentifier
	(*ProcessorIdentifier)(nil),            // 17: sushi_rpc.ProcessorIdentifier
	(*ParameterIdentifier)(nil),            // 18: sushi_rpc.ParameterIdentifier
	(*PropertyIdentifier)(nil),             // 19: sushi_rpc.PropertyIdentifier
	(*ParameterType)(nil),                  // 20: sushi_rpc.ParameterType
	(*PlayingMode)(nil),                    // 21: sushi_rpc.PlayingMode
	(*SyncMode)(nil),                       // 22: sushi_rpc.SyncMode
	(*TimeSignature)(nil),                  // 23: sushi_rpc.TimeSignature
	(*CpuTimings)(nil),                     // 24: sushi_rpc.CpuTimings
	(*NoteOnRequest)(nil),                  // 25: sushi_rpc.NoteOnRequest
	(*NoteOffRequest)(nil),                 // 26: sushi_rpc.NoteOffRequest
	(*NoteAftertouchRequest)(nil),          // 27: sushi_rpc.NoteAftertouchRequest
	(*NoteModulationRequest)(nil),          // 28: sushi_rpc.NoteModulationRequest
	(*TrackType)(nil),                      // 29: sushi_rpc.TrackType
	(*TrackInfo)(nil),                      // 30: sushi_rpc.TrackInfo
	(*TrackInfoList)(nil),                  // 31: sushi_rpc.TrackInfoList
	(*ProcessorInfo)(nil),                  // 32: sushi_rpc.ProcessorInfo
	(*ProcessorInfoList)(nil),              // 33: sushi_rpc.ProcessorInfoList
	(*ProgramIdentifier)(nil),              // 34: sushi_rpc.ProgramIdentifier
	(*ProcessorProgramIdentifier)(nil),     // 35: sushi_rpc.ProcessorProgramIdentifier
	(*ProgramInfo)(nil),                    // 36: sushi_rpc.ProgramInfo
	(*ProgramInfoList)(nil),                // 37: sushi_rpc.ProgramInfoList
	(*ProcessorProgramSetRequest)(nil),     // 38: sushi_rpc.ProcessorProgramSetRequest
	(*ProcessorBypassStateSetRequest)(nil), // 39: sushi_rpc.ProcessorBypassStateSetRequest
	(*ProcessorState)(nil),                 // 40: sushi_rpc.ProcessorState
	(*ProcessorStateSetRequest)(nil),       // 41: sushi_rpc.ProcessorStateSetRequest
	(*ParameterInfo)(nil),                  // 42: sushi_rpc.ParameterInfo
	(*ParameterInfoList)(nil),              // 43: sushi_rpc.ParameterInfoList
	(*ParameterIdRequest)(nil),             // 44: sushi_rpc.ParameterIdRequest
	(*ParameterValue)(nil),                 // 45: sushi_rpc.ParameterValue
	(*ParameterUpdate)(nil),                // 46: sushi_rpc.ParameterUpdate
	(*PropertyInfo)(nil),                   // 47: sushi_rpc.PropertyInfo
	(*PropertyInfoList)(nil),               // 48: sushi_rpc.PropertyInfoList
	(*PropertyValue)(nil),                  // 49: sushi_rpc.PropertyValue
	(*PropertyIdRequest)(nil),              // 50: sushi_rpc.PropertyIdRequest
	(*PluginType)(nil),                     // 51: sushi_rpc.PluginType
	(*ProcessorPosition)(nil),              // 52: sushi_rpc.ProcessorPosition
	(*CreateTrackRequest)(nil),             // 53: sushi_rpc.CreateTrackRequest
	(*CreateMultibusTrackRequest)(nil),     // 54: sushi_rpc.CreateMultibusTrackRequest
	(*CreatePreTrackRequest)(nil),          // 55: sushi_rpc.CreatePreTrackRequest
	(*CreatePostTrackRequest)(nil),         // 56: sushi_rpc.CreatePostTrackRequest
	(*CreateProcessorRequest)(nil),         // 57: sushi_rpc.CreateProcessorRequest
	(*MoveProcessorRequest)(nil),           // 58: sushi_rpc.MoveProcessorRequest
	(*DeleteProcessorRequest)(nil),         // 59: sushi_rpc.DeleteProcessorRequest
	(*ParameterNotificationBlocklist)(nil), // 60: sushi_rpc.ParameterNotificationBlocklist
	(*PropertyNotificationBlocklist)(nil),  // 61: sushi_rpc.PropertyNotificationBlocklist
	(*MidiChannel)(nil),                    // 62: sushi_rpc.MidiChannel
	(*AudioConnection)(nil),                // 63: sushi_rpc.AudioConnection
	(*AudioConnectionList)(nil),            // 64: sushi_rpc.AudioConnectionList
	(*CvConnection)(nil),                   // 65: sushi_rpc.CvConnection
	(*CvConnectionList)(nil),               // 66: sushi_rpc.CvConnectionList
	(*GateConnection)(nil),                 // 67: sushi_rpc.GateConnection
	(*GateConnectionList)(nil),             // 68: sushi_rpc.GateConnectionList
	(*MidiKbdConnection)(nil),              // 69: sushi_rpc.MidiKbdConnection
	(*MidiKbdConnectionList)(nil),          // 70: sushi_rpc.MidiKbdConnectionList
	(*MidiCCConnection)(nil),               // 71: sushi_rpc.MidiCCConnection
	(*MidiCCConnectionList)(nil),           // 72: sushi_rpc.MidiCCConnectionList
	(*MidiPCConnection)(nil),               // 73: sushi_rpc.MidiPCConnection
	(*MidiPCConnectionList)(nil),           // 74: sushi_rpc.MidiPCConnectionList
	(*MidiClockSetRequest)(nil),            // 75: sushi_rpc.MidiClockSetRequest
	(*OscParameterOutputList)(nil),         // 76: sushi_rpc.OscParameterOutputList
	(*TransportUpdate)(nil),                // 77: sushi_rpc.TransportUpdate
	(*TrackUpdate)(nil),                    // 78: sushi_rpc.TrackUpdate
	(*ProcessorUpdate)(nil),                // 79: sushi_rpc.ProcessorUpdate
	(*MidiKbdConnectionState)(nil),         // 80: sushi_rpc.MidiKbdConnectionState
	(*MidiCCConnectionState)(nil),          // 81: sushi_rpc.MidiCCConnectionState
	(*MidiPCConnectionState)(nil),          // 82: sushi_rpc.MidiPCConnectionState
	(*MidiState)(nil),                      // 83: sushi_rpc.MidiState
	(*OscParameterState)(nil),              // 84: sushi_rpc.OscParameterState
	(*OscState)(nil),                       // 85: sushi_rpc.OscState
	(*TrackAudioConnectionState)(nil),      // 86: sushi_rpc.TrackAudioConnectionState
	(*EngineState)(nil),                    // 87: sushi_rpc.EngineState
	(*PluginClass)(nil),                    // 88: sushi_rpc.PluginClass
	(*TrackState)(nil),                     // 89: sushi_rpc.TrackState
	(*SessionState)(nil),                   // 90: sushi_rpc.SessionState
}
var file_sushi_rpc_proto_depIdxs = []int32{
	0,   // 0: sushi_rpc.ParameterType.type:type_name -> sushi_rpc.ParameterType.Type
	1,   // 1: sushi_rpc.PlayingMode.mode:type_name -> sushi_rpc.PlayingMode.Mode
	2,   // 2: sushi_rpc.SyncMode.mode:type_name -> sushi_rpc.SyncMode.Mode
	16,  // 3: sushi_rpc.NoteOnRequest.track:type_name -> sushi_rpc.TrackIdentifier
	16,  // 4: sushi_rpc.NoteOffRequest.track:type_name -> sushi_rpc.TrackIdentifier
	16,  // 5: sushi_rpc.NoteAftertouchRequest.track:type_name -> sushi_rpc.TrackIdentifier
	16,  // 6: sushi_rpc.NoteModulationRequest.track:type_name -> sushi_rpc.TrackIdentifier
	3,   // 7: sushi_rpc.TrackType.type:type_name -> sushi_rpc.TrackType.Type
	29,  // 8: sushi_rpc.TrackInfo.type:type_name -> sushi_rpc.TrackType
	17,  // 9: sushi_rpc.TrackInfo.processors:type_name -> sushi_rpc.ProcessorIdentifier
	30,  // 10: sushi_rpc.TrackInfoList.tracks:type_name -> sushi_rpc.TrackInfo
	32,  // 11: sushi_rpc.ProcessorInfoList.processors:type_name -> sushi_rpc.ProcessorInfo
	17,  // 12: sushi_rpc.ProcessorProgramIdentifier.processor:type_name -> sushi_rpc.ProcessorIdentifier
	34,  // 13: sushi_rpc.ProgramInfo.id:type_name -> sushi_rpc.ProgramIdentifier
	36,  // 14: sushi_rpc.ProgramInfoList.programs:type_name -> sushi_rpc.ProgramInfo
	17,  // 15: sushi_rpc.ProcessorProgramSetRequest.processor:type_name -> sushi_rpc.ProcessorIdentifier
	34,  // 16: sushi_rpc.ProcessorProgramSetRequest.program:type_name -> sushi_rpc.ProgramIdentifier
	17,  // 17: sushi_rpc.ProcessorBypassStateSetRequest.processor:type_name -> sushi_rpc.ProcessorIdentifier
	14,  // 18: sushi_rpc.ProcessorState.program_id:type_name -> sushi_rpc.OptionalIntValue
	13,  // 19: sushi_rpc.ProcessorState.bypassed:type_name -> sushi_rpc.OptionalBoolValue
	49,  // 20: sushi_rpc.ProcessorState.properties:type_name -> sushi_rpc.PropertyValue
	45,  // 21: sushi_rpc.ProcessorState.parameters:type_name -> sushi_rpc.ParameterValue
	17,  // 22: sushi_rpc.ProcessorStateSetRequest.processor:type_name -> sushi_rpc.ProcessorIdentifier
	40,  // 23: sushi_rpc.ProcessorStateSetRequest.state:type_name -> sushi_rpc.ProcessorState
	20,  // 24: sushi_rpc.ParameterInfo.type:type_name -> sushi_rpc.ParameterType
	42,  // 25: sushi_rpc.ParameterInfoList.parameters:type_name -> sushi_rpc.ParameterInfo
	17,  // 26: sushi_rpc.ParameterIdRequest.processor:type_name -> sushi_rpc.ProcessorIdentifier
	18,  // 27: sushi_rpc.ParameterValue.parameter:type_name -> sushi_rpc.ParameterIdentifier
	18,  // 28: sushi_rpc.ParameterUpdate.parameter:type_name -> sushi_rpc.ParameterIdentifier
	47,  // 29: sushi_rpc.PropertyInfoList.properties:type_name -> sushi_rpc.PropertyInfo
	19,  // 30: sushi_rpc.PropertyValue.property:type_name -> sushi_rpc.PropertyIdentifier
	17,  // 31: sushi_rpc.PropertyIdRequest.processor:type_name -> sushi_rpc.ProcessorIdentifier
	4,   // 32: sushi_rpc.PluginType.type:type_name -> sushi_rpc.PluginType.Type
	17,  // 33: sushi_rpc.ProcessorPosition.before_processor:type_name -> sushi_rpc.ProcessorIdentifier
	51,  // 34: sushi_rpc.CreateProcessorRequest.type:type_name -> sushi_rpc.PluginType
	16,  // 35: sushi_rpc.CreateProcessorRequest.track:type_name -> sushi_rpc.TrackIdentifier
	52,  // 36: sushi_rpc.CreateProcessorRequest.position:type_name -> sushi_rpc.ProcessorPosition
	17,  // 37: sushi_rpc.MoveProcessorRequest.processor:type_name -> sushi_rpc.ProcessorIdentifier
	16,  // 38: sushi_rpc.MoveProcessorRequest.source_track:type_name -> sushi_rpc.TrackIdentifier
	16,  // 39: sushi_rpc.MoveProcessorRequest.dest_track:type_name -> sushi_rpc.TrackIdentifier
	52,  // 40: sushi_rpc.MoveProcessorRequest.position:type_name -> sushi_rpc.ProcessorPosition
	17,  // 41: sushi_rpc.DeleteProcessorRequest.processor:type_name -> sushi_rpc.ProcessorIdentifier
	16,  // 42: sushi_rpc.DeleteProcessorRequest.track:type_name -> sushi_rpc.TrackIdentifier
	18,  // 43: sushi_rpc.ParameterNotificationBlocklist.parameters:type_name -> sushi_rpc.ParameterIdentifier
	19,  // 44: sushi_rpc.PropertyNotificationBlocklist.properties:type_name -> sushi_rpc.PropertyIdentifier
	5,   // 45: sushi_rpc.MidiChannel.channel:type_name -> sushi_rpc.MidiChannel.Channel
	16,  // 46: sushi_rpc.AudioConnection.track:type_name -> sushi_rpc.TrackIdentifier
	63,  // 47: sushi_rpc.AudioConnectionList.connections:type_name -> sushi_rpc.AudioConnection
	18,  // 48: sushi_rpc.CvConnection.parameter:type_name -> sushi_rpc.ParameterIdentifier
	65,  // 49: sushi_rpc.CvConnectionList.connections:type_name -> sushi_rpc.CvConnection
	17,  // 50: sushi_rpc.GateConnection.processor:type_name -> sushi_rpc.ProcessorIdentifier
	67,  // 51: sushi_rpc.GateConnectionList.connections:type_name -> sushi_rpc.GateConnection
	16,  // 52: sushi_rpc.MidiKbdConnection.track:type_name -> sushi_rpc.TrackIdentifier
	62,  // 53: sushi_rpc.MidiKbdConnection.channel:type_name -> sushi_rpc.MidiChannel
	69,  // 54: sushi_rpc.MidiKbdConnectionList.connections:type_name -> sushi_rpc.MidiKbdConnection
	18,  // 55: sushi_rpc.MidiCCConnection.parameter:type_name -> sushi_rpc.ParameterIdentifier
	62,  // 56: sushi_rpc.MidiCCConnection.channel:type_name -> sushi_rpc.MidiChannel
	71,  // 57: sushi_rpc.MidiCCConnectionList.connections:type_name -> sushi_rpc.MidiCCConnection
	17,  // 58: sushi_rpc.MidiPCConnection.processor:type_name -> sushi_rpc.ProcessorIdentifier
	62,  // 59: sushi_rpc.MidiPCConnection.channel:type_name -> sushi_rpc.MidiChannel
	73,  // 60: sushi_rpc.MidiPCConnectionList.connections:type_name -> sushi_rpc.MidiPCConnection
	21,  // 61: sushi_rpc.TransportUpdate.playing_mode:type_name -> sushi_rpc.PlayingMode
	22,  // 62: sushi_rpc.TransportUpdate.sync_mode:type_name -> sushi_rpc.SyncMode
	23,  // 63: sushi_rpc.TransportUpdate.time_signature:type_name -> sushi_rpc.TimeSignature
	6,   // 64: sushi_rpc.TrackUpdate.action:type_name -> sushi_rpc.TrackUpdate.Action
	16,  // 65: sushi_rpc.TrackUpdate.track:type_name -> sushi_rpc.TrackIdentifier
	7,   // 66: sushi_rpc.ProcessorUpdate.action:type_name -> sushi_rpc.ProcessorUpdate.Action
	17,  // 67: sushi_rpc.ProcessorUpdate.processor:type_name -> sushi_rpc.ProcessorIdentifier
	16,  // 68: sushi_rpc.ProcessorUpdate.parent_track:type_name -> sushi_rpc.TrackIdentifier
	62,  // 69: sushi_rpc.MidiKbdConnectionState.channel:type_name -> sushi_rpc.MidiChannel
	18,  // 70: sushi_rpc.MidiCCConnectionState.parameter:type_name -> sushi_rpc.ParameterIdentifier
	62,  // 71: sushi_rpc.MidiCCConnectionState.channel:type_name -> sushi_rpc.MidiChannel
	62,  // 72: sushi_rpc.MidiPCConnectionState.channel:type_name -> sushi_rpc.MidiChannel
	80,  // 73: sushi_rpc.MidiState.kbd_input_connections:type_name -> sushi_rpc.MidiKbdConnectionState
	80,  // 74: sushi_rpc.MidiState.kbd_output_connections:type_name -> sushi_rpc.MidiKbdConnectionState
	81,  // 75: sushi_rpc.MidiState.cc_connections:type_name -> sushi_rpc.MidiCCConnectionState
	82,  // 76: sushi_rpc.MidiState.pc_connections:type_name -> sushi_rpc.MidiPCConnectionState
	84,  // 77: sushi_rpc.OscState.enabled_processor_outputs:type_name -> sushi_rpc.OscParameterState
	21,  // 78: sushi_rpc.EngineState.playing_mode:type_name -> sushi_rpc.PlayingMode
	22,  // 79: sushi_rpc.EngineState.sync_mode:type_name -> sushi_rpc.SyncMode
	23,  // 80: sushi_rpc.EngineState.time_signature:type_name -> sushi_rpc.TimeSignature
	86,  // 81: sushi_rpc.EngineState.input_connections:type_name -> sushi_rpc.TrackAudioConnectionState
	86,  // 82: sushi_rpc.EngineState.output_connections:type_name -> sushi_rpc.TrackAudioConnectionState
	51,  // 83: sushi_rpc.PluginClass.type:type_name -> sushi_rpc.PluginType
	40,  // 84: sushi_rpc.PluginClass.state:type_name -> sushi_rpc.ProcessorState
	29,  // 85: sushi_rpc.TrackState.type:type_name -> sushi_rpc.TrackType
	40,  // 86: sushi_rpc.TrackState.track_state:type_name -> sushi_rpc.ProcessorState
	88,  // 87: sushi_rpc.TrackState.processors:type_name -> sushi_rpc.PluginClass
	15,  // 88: sushi_rpc.SessionState.sushi_info:type_name -> sushi_rpc.SushiBuildInfo
	85,  // 89: sushi_rpc.SessionState.osc_state:type_name -> sushi_rpc.OscState
	83,  // 90: sushi_rpc.SessionState.midi_state:type_name -> sushi_rpc.MidiState
	87,  // 91: sushi_rpc.SessionState.engine_state:type_name -> sushi_rpc.EngineState
	89,  // 92: sushi_rpc.SessionState.tracks:type_name -> sushi_rpc.TrackState
	8,   // 93: sushi_rpc.SystemController.GetSushiVersion:input_type -> sushi_rpc.GenericVoidValue
	8,   // 94: sushi_rpc.SystemController.GetBuildInfo:input_type -> sushi_rpc.GenericVoidValue
	8,   // 95: sushi_rpc.SystemController.GetInputAudioChannelCount:input_type -> sushi_rpc.GenericVoidValue
	8,   // 96: sushi_rpc.SystemController.GetOutputAudioChannelCount:input_type -> sushi_rpc.GenericVoidValue
	8,   // 97: sushi_rpc.TransportController.GetSamplerate:input_type -> sushi_rpc.GenericVoidValue
	8,   // 98: sushi_rpc.TransportController.GetPlayingMode:input_type -> sushi_rpc.GenericVoidValue
	8,   // 99: sushi_rpc.TransportController.GetSyncMode:input_type -> sushi_rpc.GenericVoidValue
	8,   // 100: sushi_rpc.TransportController.GetTimeSignature:input_type -> sushi_rpc.GenericVoidValue
	8,   // 101: sushi_rpc.TransportController.GetTempo:input_type -> sushi_rpc.GenericVoidValue
	9,   // 102: sushi_rpc.TransportController.SetTempo:input_type -> sushi_rpc.GenericFloatValue
	21,  // 103: sushi_rpc.TransportController.SetPlayingMode:input_type -> sushi_rpc.PlayingMode
	22,  // 104: sushi_rpc.TransportController.SetSyncMode:input_type -> sushi_rpc.SyncMode
	23,  // 105: sushi_rpc.TransportController.SetTimeSignature:input_type -> sushi_rpc.TimeSignature
	8,   // 106: sushi_rpc.TimingController.GetTimingsEnabled:input_type -> sushi_rpc.GenericVoidValue
	11,  // 107: sushi_rpc.TimingController.SetTimingsEnabled:input_type -> sushi_rpc.GenericBoolValue
	8,   // 108: sushi_rpc.TimingController.GetEngineTimings:input_type -> sushi_rpc.GenericVoidValue
	16,  // 109: sushi_rpc.TimingController.GetTrackTimings:input_type -> sushi_rpc.TrackIdentifier
	17,  // 110: sushi_rpc.TimingController.GetProcessorTimings:input_type -> sushi_rpc.ProcessorIdentifier
	8,   // 111: sushi_rpc.TimingController.ResetAllTimings:input_type -> sushi_rpc.GenericVoidValue
	16,  // 112: sushi_rpc.TimingController.ResetTrackTimings:input_type -> sushi_rpc.TrackIdentifier
	17,  // 113: sushi_rpc.TimingController.ResetProcessorTimings:input_type -> sushi_rpc.ProcessorIdentifier
	25,  // 114: sushi_rpc.KeyboardController.SendNoteOn:input_type -> sushi_rpc.NoteOnRequest
	26,  // 115: sushi_rpc.KeyboardController.SendNoteOff:input_type -> sushi_rpc.NoteOffRequest
	27,  // 116: sushi_rpc.KeyboardController.SendNoteAftertouch:input_type -> sushi_rpc.NoteAftertouchRequest
	28,  // 117: sushi_rpc.KeyboardController.SendAftertouch:input_type -> sushi_rpc.NoteModulationRequest
	28,  // 118: sushi_rpc.KeyboardController.SendPitchBend:input_type -> sushi_rpc.NoteModulationRequest
	28,  // 119: sushi_rpc.KeyboardController.SendModulation:input_type -> sushi_rpc.NoteModulationRequest
	8,   // 120: sushi_rpc.AudioGraphController.GetAllProcessors:input_type -> sushi_rpc.GenericVoidValue
	8,   // 121: sushi_rpc.AudioGraphController.GetAllTracks:input_type -> sushi_rpc.GenericVoidValue
	12,  // 122: sushi_rpc.AudioGraphController.GetTrackId:input_type -> sushi_rpc.GenericStringValue
	16,  // 123: sushi_rpc.AudioGraphController.GetTrackInfo:input_type -> sushi_rpc.TrackIdentifier
	16,  // 124: sushi_rpc.AudioGraphController.GetTrackProcessors:input_type -> sushi_rpc.TrackIdentifier
	12,  // 125: sushi_rpc.AudioGraphController.GetProcessorId:input_type -> sushi_rpc.GenericStringValue
	17,  // 126: sushi_rpc.AudioGraphController.GetProcessorInfo:input_type -> sushi_rpc.ProcessorIdentifier
	17,  // 127: sushi_rpc.AudioGraphController.GetProcessorBypassState:input_type -> sushi_rpc.ProcessorIdentifier
	17,  // 128: sushi_rpc.AudioGraphController.GetProcessorState:input_type -> sushi_rpc.ProcessorIdentifier
	39,  // 129: sushi_rpc.AudioGraphController.SetProcessorBypassState:input_type -> sushi_rpc.ProcessorBypassStateSetRequest
	41,  // 130: sushi_rpc.AudioGraphController.SetProcessorState:input_type -> sushi_rpc.ProcessorStateSetRequest
	53,  // 131: sushi_rpc.AudioGraphController.CreateTrack:input_type -> sushi_rpc.CreateTrackRequest
	54,  // 132: sushi_rpc.AudioGraphController.CreateMultibusTrack:input_type -> sushi_rpc.CreateMultibusTrackRequest
	55,  // 133: sushi_rpc.AudioGraphController.CreatePreTrack:input_type -> sushi_rpc.CreatePreTrackRequest
	56,  // 134: sushi_rpc.AudioGraphController.CreatePostTrack:input_type -> sushi_rpc.CreatePostTrackRequest
	57,  // 135: sushi_rpc.AudioGraphController.CreateProcessorOnTrack:input_type -> sushi_rpc.CreateProcessorRequest
	58,  // 136: sushi_rpc.AudioGraphController.MoveProcessorOnTrack:input_type -> sushi_rpc.MoveProcessorRequest
	59,  // 137: sushi_rpc.AudioGraphController.DeleteProcessorFromTrack:input_type -> sushi_rpc.DeleteProcessorRequest
	16,  // 138: sushi_rpc.AudioGraphController.DeleteTrack:input_type -> sushi_rpc.TrackIdentifier
	17,  // 139: sushi_rpc.ProgramController.GetProcessorCurrentProgram:input_type -> sushi_rpc.ProcessorIdentifier
	17,  // 140: sushi_rpc.ProgramController.GetProcessorCurrentProgramName:input_type -> sushi_rpc.ProcessorIdentifier
	35,  // 141: sushi_rpc.ProgramController.GetProcessorProgramName:input_type -> sushi_rpc.ProcessorProgramIdentifier
	17,  // 142: sushi_rpc.ProgramController.GetProcessorPrograms:input_type -> sushi_rpc.ProcessorIdentifier
	38,  // 143: sushi_rpc.ProgramController.SetProcessorProgram:input_type -> sushi_rpc.ProcessorProgramSetRequest
	16,  // 144: sushi_rpc.ParameterController.GetTrackParameters:input_type -> sushi_rpc.TrackIdentifier
	17,  // 145: sushi_rpc.ParameterController.GetProcessorParameters:input_type -> sushi_rpc.ProcessorIdentifier
	44,  // 146: sushi_rpc.ParameterController.GetParameterId:input_type -> sushi_rpc.ParameterIdRequest
	18,  // 147: sushi_rpc.ParameterController.GetParameterInfo:input_type -> sushi_rpc.ParameterIdentifier
	18,  // 148: sushi_rpc.ParameterController.GetParameterValue:input_type -> sushi_rpc.ParameterIdentifier
	18,  // 149: sushi_rpc.ParameterController.GetParameterValueInDomain:input_type -> sushi_rpc.ParameterIdentifier
	18,  // 150: sushi_rpc.ParameterController.GetParameterValueAsString:input_type -> sushi_rpc.ParameterIdentifier
	45,  // 151: sushi_rpc.ParameterController.SetParameterValue:input_type -> sushi_rpc.ParameterValue
	16,  // 152: sushi_rpc.ParameterController.GetTrackProperties:input_type -> sushi_rpc.TrackIdentifier
	17,  // 153: sushi_rpc.ParameterController.GetProcessorProperties:input_type -> sushi_rpc.ProcessorIdentifier
	50,  // 154: sushi_rpc.ParameterController.GetPropertyId:input_type -> sushi_rpc.PropertyIdRequest
	19,  // 155: sushi_rpc.ParameterController.GetPropertyInfo:input_type -> sushi_rpc.PropertyIdentifier
	19,  // 156: sushi_rpc.ParameterController.GetPropertyValue:input_type -> sushi_rpc.PropertyIdentifier
	49,  // 157: sushi_rpc.ParameterController.SetPropertyValue:input_type -> sushi_rpc.PropertyValue
	8,   // 158: sushi_rpc.MidiController.GetInputPorts:input_type -> sushi_rpc.GenericVoidValue
	8,   // 159: sushi_rpc.MidiController.GetOutputPorts:input_type -> sushi_rpc.GenericVoidValue
	8,   // 160: sushi_rpc.MidiController.GetAllKbdInputConnections:input_type -> sushi_rpc.GenericVoidValue
	8,   // 161: sushi_rpc.MidiController.GetAllKbdOutputConnections:input_type -> sushi_rpc.GenericVoidValue
	8,   // 162: sushi_rpc.MidiController.GetAllCCInputConnections:input_type -> sushi_rpc.GenericVoidValue
	8,   // 163: sushi_rpc.MidiController.GetAllPCInputConnections:input_type -> sushi_rpc.GenericVoidValue
	17,  // 164: sushi_rpc.MidiController.GetCCInputConnectionsForProcessor:input_type -> sushi_rpc.ProcessorIdentifier
	17,  // 165: sushi_rpc.MidiController.GetPCInputConnectionsForProcessor:input_type -> sushi_rpc.ProcessorIdentifier
	10,  // 166: sushi_rpc.MidiController.GetMidiClockOutputEnabled:input_type -> sushi_rpc.GenericIntValue
	75,  // 167: sushi_rpc.MidiController.SetMidiClockOutputEnabled:input_type -> sushi_rpc.MidiClockSetRequest
	69,  // 168: sushi_rpc.MidiController.ConnectKbdInputToTrack:input_type -> sushi_rpc.MidiKbdConnection
	69,  // 169: sushi_rpc.MidiController.ConnectKbdOutputFromTrack:input_type -> sushi_rpc.MidiKbdConnection
	71,  // 170: sushi_rpc.MidiController.ConnectCCToParameter:input_type -> sushi_rpc.MidiCCConnection
	73,  // 171: sushi_rpc.MidiController.ConnectPCToProcessor:input_type -> sushi_rpc.MidiPCConnection
	69,  // 172: sushi_rpc.MidiController.DisconnectKbdInput:input_type -> sushi_rpc.MidiKbdConnection
	69,  // 173: sushi_rpc.MidiController.DisconnectKbdOutput:input_type -> sushi_rpc.MidiKbdConnection
	71,  // 174: sushi_rpc.MidiController.DisconnectCC:input_type -> sushi_rpc.MidiCCConnection
	73,  // 175: sushi_rpc.MidiController.DisconnectPC:input_type -> sushi_rpc.MidiPCConnection
	17,  // 176: sushi_rpc.MidiController.DisconnectAllCCFromProcessor:input_type -> sushi_rpc.ProcessorIdentifier
	17,  // 177: sushi_rpc.MidiController.DisconnectAllPCFromProcessor:input_type -> sushi_rpc.ProcessorIdentifier
	8,   // 178: sushi_rpc.AudioRoutingController.GetAllInputConnections:input_type -> sushi_rpc.GenericVoidValue
	8,   // 179: sushi_rpc.AudioRoutingController.GetAllOutputConnections:input_type -> sushi_rpc.GenericVoidValue
	16,  // 180: sushi_rpc.AudioRoutingController.GetInputConnectionsForTrack:input_type -> sushi_rpc.TrackIdentifier
	16,  // 181: sushi_rpc.AudioRoutingController.GetOutputConnectionsForTrack:input_type -> sushi_rpc.TrackIdentifier
	63,  // 182: sushi_rpc.AudioRoutingController.ConnectInputChannelToTrack:input_type -> sushi_rpc.AudioConnection
	63,  // 183: sushi_rpc.AudioRoutingController.ConnectOutputChannelFromTrack:input_type -> sushi_rpc.AudioConnection
	63,  // 184: sushi_rpc.AudioRoutingController.DisconnectInput:input_type -> sushi_rpc.AudioConnection
	63,  // 185: sushi_rpc.AudioRoutingController.DisconnectOutput:input_type -> sushi_rpc.AudioConnection
	16,  // 186: sushi_rpc.AudioRoutingController.DisconnectAllInputsFromTrack:input_type -> sushi_rpc.TrackIdentifier
	16,  // 187: sushi_rpc.AudioRoutingController.DisconnectAllOutputFromTrack:input_type -> sushi_rpc.TrackIdentifier
	16,  // 188: sushi_rpc.AudioRoutingController.DisconnectAllOutputsFromTrack:input_type -> sushi_rpc.TrackIdentifier
	8,   // 189: sushi_rpc.CvGateController.GetCvInputChannelCount:input_type -> sushi_rpc.GenericVoidValue
	8,   // 190: sushi_rpc.CvGateController.GetCvOutputChannelCount:input_type -> sushi_rpc.GenericVoidValue
	8,   // 191: sushi_rpc.CvGateController.GetAllCvInputConnections:input_type -> sushi_rpc.GenericVoidValue
	8,   // 192: sushi_rpc.CvGateController.GetAllCvOutputConnections:input_type -> sushi_rpc.GenericVoidValue
	8,   // 193: sushi_rpc.CvGateController.GetAllGateInputConnections:input_type -> sushi_rpc.GenericVoidValue
	8,   // 194: sushi_rpc.CvGateController.GetAllGateOutputConnections:input_type -> sushi_rpc.GenericVoidValue
	17,  // 195: sushi_rpc.CvGateController.GetCvInputConnectionsForProcessor:input_type -> sushi_rpc.ProcessorIdentifier
	17,  // 196: sushi_rpc.CvGateController.GetCvOutputConnectionsForProcessor:input_type -> sushi_rpc.ProcessorIdentifier
	17,  // 197: sushi_rpc.CvGateController.GetGateInputConnectionsForProcessor:input_type -> sushi_rpc.ProcessorIdentifier
	17,  // 198: sushi_rpc.CvGateController.GetGateOutputConnectionsForProcessor:input_type -> sushi_rpc.ProcessorIdentifier
	65,  // 199: sushi_rpc.CvGateController.ConnectCvInputToParameter:input_type -> sushi_rpc.CvConnection
	65,  // 200: sushi_rpc.CvGateController.ConnectCvOutputFromParameter:input_type -> sushi_rpc.CvConnection
	67,  // 201: sushi_rpc.CvGateController.ConnectGateInputToProcessor:input_type -> sushi_rpc.GateConnection
	67,  // 202: sushi_rpc.CvGateController.ConnectGateOutputFromProcessor:input_type -> sushi_rpc.GateConnection
	65,  // 203: sushi_rpc.CvGateController.DisconnectCvInput:input_type -> sushi_rpc.CvConnection
	65,  // 204: sushi_rpc.CvGateController.DisconnectCvOutput:input_type -> sushi_rpc.CvConnection
	67,  // 205: sushi_rpc.CvGateController.DisconnectGateInput:input_type -> sushi_rpc.GateConnection
	67,  // 206: sushi_rpc.CvGateController.DisconnectGateOutput:input_type -> sushi_rpc.GateConnection
	17,  // 207: sushi_rpc.CvGateController.DisconnectAllCvInputsFromProcessor:input_type -> sushi_rpc.ProcessorIdentifier
	17,  // 208: sushi_rpc.CvGateController.DisconnectAllCvOutputsFromProcessor:input_type -> sushi_rpc.ProcessorIdentifier
	17,  // 209: sushi_rpc.CvGateController.DisconnectAllGateInputsFromProcessor:input_type -> sushi_rpc.ProcessorIdentifier
	17,  // 210: sushi_rpc.CvGateController.DisconnectAllGateOutputsFromProcessor:input_type -> sushi_rpc.ProcessorIdentifier
	8,   // 211: sushi_rpc.OscController.GetSendIP:input_type -> sushi_rpc.GenericVoidValue
	8,   // 212: sushi_rpc.OscController.GetSendPort:input_type -> sushi_rpc.GenericVoidValue
	8,   // 213: sushi_rpc.OscController.GetReceivePort:input_type -> sushi_rpc.GenericVoidValue
	8,   // 214: sushi_rpc.OscController.GetEnabledParameterOutputs:input_type -> sushi_rpc.GenericVoidValue
	18,  // 215: sushi_rpc.OscController.EnableOutputForParameter:input_type -> sushi_rpc.ParameterIdentifier
	18,  // 216: sushi_rpc.OscController.DisableOutputForParameter:input_type -> sushi_rpc.ParameterIdentifier
	8,   // 217: sushi_rpc.OscController.EnableAllOutput:input_type -> sushi_rpc.GenericVoidValue
	8,   // 218: sushi_rpc.OscController.DisableAllOutput:input_type -> sushi_rpc.GenericVoidValue
	8,   // 219: sushi_rpc.SessionController.SaveSession:input_type -> sushi_rpc.GenericVoidValue
	90,  // 220: sushi_rpc.SessionController.RestoreSession:input_type -> sushi_rpc.SessionState
	8,   // 221: sushi_rpc.NotificationController.SubscribeToTransportChanges:input_type -> sushi_rpc.GenericVoidValue
	8,   // 222: sushi_rpc.NotificationController.SubscribeToEngineCpuTimingUpdates:input_type -> sushi_rpc.GenericVoidValue
	8,   // 223: sushi_rpc.NotificationController.SubscribeToTrackChanges:input_type -> sushi_rpc.GenericVoidValue
	8,   // 224: sushi_rpc.NotificationController.SubscribeToProcessorChanges:input_type -> sushi_rpc.GenericVoidValue
	60,  // 225: sushi_rpc.NotificationController.SubscribeToParameterUpdates:input_type -> sushi_rpc.ParameterNotificationBlocklist
	61,  // 226: sushi_rpc.NotificationController.SubscribeToPropertyUpdates:input_type -> sushi_rpc.PropertyNotificationBlocklist
	12,  // 227: sushi_rpc.SystemController.GetSushiVersion:output_type -> sushi_rpc.GenericStringValue
	15,  // 228: sushi_rpc.SystemController.GetBuildInfo:output_type -> sushi_rpc.SushiBuildInfo
	10,  // 229: sushi_rpc.SystemController.GetInputAudioChannelCount:output_type -> sushi_rpc.GenericIntValue
	10,  // 230: sushi_rpc.SystemController.GetOutputAudioChannelCount:output_type -> sushi_rpc.GenericIntValue
	9,   // 231: sushi_rpc.TransportController.GetSamplerate:output_type -> sushi_rpc.GenericFloatValue
	21,  // 232: sushi_rpc.TransportController.GetPlayingMode:output_type -> sushi_rpc.PlayingMode
	22,  // 233: sushi_rpc.TransportController.GetSyncMode:output_type -> sushi_rpc.SyncMode
	23,  // 234: sushi_rpc.TransportController.GetTimeSignature:output_type -> sushi_rpc.TimeSignature
	9,   // 235: sushi_rpc.TransportController.GetTempo:output_type -> sushi_rpc.GenericFloatValue
	8,   // 236: sushi_rpc.TransportController.SetTempo:output_type -> sushi_rpc.GenericVoidValue
	8,   // 237: sushi_rpc.TransportController.SetPlayingMode:output_type -> sushi_rpc.GenericVoidValue
	8,   // 238: sushi_rpc.TransportController.SetSyncMode:output_type -> sushi_rpc.GenericVoidValue
	8,   // 239: sushi_rpc.TransportController.SetTimeSignature:output_type -> sushi_rpc.GenericVoidValue
	11,  // 240: sushi_rpc.TimingController.GetTimingsEnabled:output_type -> sushi_rpc.GenericBoolValue
	8,   // 241: sushi_rpc.TimingController.SetTimingsEnabled:output_type -> sushi_rpc.GenericVoidValue
	24,  // 242: sushi_rpc.TimingController.GetEngineTimings:output_type -> sushi_rpc.CpuTimings
	24,  // 243: sushi_rpc.TimingController.GetTrackTimings:output_type -> sushi_rpc.CpuTimings
	24,  // 244: sushi_rpc.TimingController.GetProcessorTimings:output_type -> sushi_rpc.CpuTimings
	8,   // 245: sushi_rpc.TimingController.ResetAllTimings:output_type -> sushi_rpc.GenericVoidValue
	8,   // 246: sushi_rpc.TimingController.ResetTrackTimings:output_type -> sushi_rpc.GenericVoidValue
	8,   // 247: sushi_rpc.TimingController.ResetProcessorTimings:output_type -> sushi_rpc.GenericVoidValue
	8,   // 248: sushi_rpc.KeyboardController.SendNoteOn:output_type -> sushi_rpc.GenericVoidValue
	8,   // 249: sushi_rpc.KeyboardController.SendNoteOff:output_type -> sushi_rpc.GenericVoidValue
	8,   // 250: sushi_rpc.KeyboardController.SendNoteAftertouch:output_type -> sushi_rpc.GenericVoidValue
	8,   // 251: sushi_rpc.KeyboardController.SendAftertouch:output_type -> sushi_rpc.GenericVoidValue
	8,   // 252: sushi_rpc.KeyboardController.SendPitchBend:output_type -> sushi_rpc.GenericVoidValue
	8,   // 253: sushi_rpc.KeyboardController.SendModulation:output_type -> sushi_rpc.GenericVoidValue
	33,  // 254: sushi_rpc.AudioGraphController.GetAllProcessors:output_type -> sushi_rpc.ProcessorInfoList
	31,  // 255: sushi_rpc.AudioGraphController.GetAllTracks:output_type -> sushi_rpc.TrackInfoList
	16,  // 256: sushi_rpc.AudioGraphController.GetTrackId:output_type -> sushi_rpc.TrackIdentifier
	30,  // 257: sushi_rpc.AudioGraphController.GetTrackInfo:output_type -> sushi_rpc.TrackInfo
	33,  // 258: sushi_rpc.AudioGraphController.GetTrackProcessors:output_type -> sushi_rpc.ProcessorInfoList
	17,  // 259: sushi_rpc.AudioGraphController.GetProcessorId:output_type -> sushi_rpc.ProcessorIdentifier
	32,  // 260: sushi_rpc.AudioGraphController.GetProcessorInfo:output_type -> sushi_rpc.ProcessorInfo
	11,  // 261: sushi_rpc.AudioGraphController.GetProcessorBypassState:output_type -> sushi_rpc.GenericBoolValue
	40,  // 262: sushi_rpc.AudioGraphController.GetProcessorState:output_type -> sushi_rpc.ProcessorState
	8,   // 263: sushi_rpc.AudioGraphController.SetProcessorBypassState:output_type -> sushi_rpc.GenericVoidValue
	8,   // 264: sushi_rpc.AudioGraphController.SetProcessorState:output_type -> sushi_rpc.GenericVoidValue
	8,   // 265: sushi_rpc.AudioGraphController.CreateTrack:output_type -> sushi_rpc.GenericVoidValue
	8,   // 266: sushi_rpc.AudioGraphController.CreateMultibusTrack:output_type -> sushi_rpc.GenericVoidValue
	8,   // 267: sushi_rpc.AudioGraphController.CreatePreTrack:output_type -> sushi_rpc.GenericVoidValue
	8,   // 268: sushi_rpc.AudioGraphController.CreatePostTrack:output_type -> sushi_rpc.GenericVoidValue
	8,   // 269: sushi_rpc.AudioGraphController.CreateProcessorOnTrack:output_type -> sushi_rpc.GenericVoidValue
	8,   // 270: sushi_rpc.AudioGraphController.MoveProcessorOnTrack:output_type -> sushi_rpc.GenericVoidValue
	8,   // 271: sushi_rpc.AudioGraphController.DeleteProcessorFromTrack:output_type -> sushi_rpc.GenericVoidValue
	8,   // 272: sushi_rpc.AudioGraphController.DeleteTrack:output_type -> sushi_rpc.GenericVoidValue
	34,  // 273: sushi_rpc.ProgramController.GetProcessorCurrentProgram:output_type -> sushi_rpc.ProgramIdentifier
	12,  // 274: sushi_rpc.ProgramController.GetProcessorCurrentProgramName:output_type -> sushi_rpc.GenericStringValue
	12,  // 275: sushi_rpc.ProgramController.GetProcessorProgramName:output_type -> sushi_rpc.GenericStringValue
	37,  // 276: sushi_rpc.ProgramController.GetProcessorPrograms:output_type -> sushi_rpc.ProgramInfoList
	8,   // 277: sushi_rpc.ProgramController.SetProcessorProgram:output_type -> sushi_rpc.GenericVoidValue
	43,  // 278: sushi_rpc.ParameterController.GetTrackParameters:output_type -> sushi_rpc.ParameterInfoList
	43,  // 279: sushi_rpc.ParameterController.GetProcessorParameters:output_type -> sushi_rpc.ParameterInfoList
	18,  // 280: sushi_rpc.ParameterController.GetParameterId:output_type -> sushi_rpc.ParameterIdentifier
	42,  // 281: sushi_rpc.ParameterController.GetParameterInfo:output_type -> sushi_rpc.ParameterInfo
	9,   // 282: sushi_rpc.ParameterController.GetParameterValue:output_type -> sushi_rpc.GenericFloatValue
	9,   // 283: sushi_rpc.ParameterController.GetParameterValueInDomain:output_type -> sushi_rpc.GenericFloatValue
	12,  // 284: sushi_rpc.ParameterController.GetParameterValueAsString:output_type -> sushi_rpc.GenericStringValue
	8,   // 285: sushi_rpc.ParameterController.SetParameterValue:output_type -> sushi_rpc.GenericVoidValue
	48,  // 286: sushi_rpc.ParameterController.GetTrackProperties:output_type -> sushi_rpc.PropertyInfoList
	48,  // 287: sushi_rpc.ParameterController.GetProcessorProperties:output_type -> sushi_rpc.PropertyInfoList
	19,  // 288: sushi_rpc.ParameterController.GetPropertyId:output_type -> sushi_rpc.PropertyIdentifier
	47,  // 289: sushi_rpc.ParameterController.GetPropertyInfo:output_type -> sushi_rpc.PropertyInfo
	12,  // 290: sushi_rpc.ParameterController.GetPropertyValue:output_type -> sushi_rpc.GenericStringValue
	8,   // 291: sushi_rpc.ParameterController.SetPropertyValue:output_type -> sushi_rpc.GenericVoidValue
	10,  // 292: sushi_rpc.MidiController.GetInputPorts:output_type -> sushi_rpc.GenericIntValue
	10,  // 293: sushi_rpc.MidiController.GetOutputPorts:output_type -> sushi_rpc.GenericIntValue
	70,  // 294: sushi_rpc.MidiController.GetAllKbdInputConnections:output_type -> sushi_rpc.MidiKbdConnectionList
	70,  // 295: sushi_rpc.MidiController.GetAllKbdOutputConnections:output_type -> sushi_rpc.MidiKbdConnectionList
	72,  // 296: sushi_rpc.MidiController.GetAllCCInputConnections:output_type -> sushi_rpc.MidiCCConnectionList
	74,  // 297: sushi_rpc.MidiController.GetAllPCInputConnections:output_type -> sushi_rpc.MidiPCConnectionList
	72,  // 298: sushi_rpc.MidiController.GetCCInputConnectionsForProcessor:output_type -> sushi_rpc.MidiCCConnectionList
	74,  // 299: sushi_rpc.MidiController.GetPCInputConnectionsForProcessor:output_type -> sushi_rpc.MidiPCConnectionList
	11,  // 300: sushi_rpc.MidiController.GetMidiClockOutputEnabled:output_type -> sushi_rpc.GenericBoolValue
	8,   // 301: sushi_rpc.MidiController.SetMidiClockOutputEnabled:output_type -> sushi_rpc.GenericVoidValue
	8,   // 302: sushi_rpc.MidiController.ConnectKbdInputToTrack:output_type -> sushi_rpc.GenericVoidValue
	8,   // 303: sushi_rpc.MidiController.ConnectKbdOutputFromTrack:output_type -> sushi_rpc.GenericVoidValue
	8,   // 304: sushi_rpc.MidiController.ConnectCCToParameter:output_type -> sushi_rpc.GenericVoidValue
	8,   // 305: sushi_rpc.MidiController.ConnectPCToProcessor:output_type -> sushi_rpc.GenericVoidValue
	8,   // 306: sushi_rpc.MidiController.DisconnectKbdInput:output_type -> sushi_rpc.GenericVoidValue
	8,   // 307: sushi_rpc.MidiController.DisconnectKbdOutput:output_type -> sushi_rpc.GenericVoidValue
	8,   // 308: sushi_rpc.MidiController.DisconnectCC:output_type -> sushi_rpc.GenericVoidValue
	8,   // 309: sushi_rpc.MidiController.DisconnectPC:output_type -> sushi_rpc.GenericVoidValue
	8,   // 310: sushi_rpc.MidiController.DisconnectAllCCFromProcessor:output_type -> sushi_rpc.GenericVoidValue
	8,   // 311: sushi_rpc.MidiController.DisconnectAllPCFromProcessor:output_type -> sushi_rpc.GenericVoidValue
	64,  // 312: sushi_rpc.AudioRoutingController.GetAllInputConnections:output_type -> sushi_rpc.AudioConnectionList
	64,  // 313: sushi_rpc.AudioRoutingController.GetAllOutputConnections:output_type -> sushi_rpc.AudioConnectionList
	64,  // 314: sushi_rpc.AudioRoutingController.GetInputConnectionsForTrack:output_type -> sushi_rpc.AudioConnectionList
	64,  // 315: sushi_rpc.AudioRoutingController.GetOutputConnectionsForTrack:output_type -> sushi_rpc.AudioConnectionList
	8,   // 316: sushi_rpc.AudioRoutingController.ConnectInputChannelToTrack:output_type -> sushi_rpc.GenericVoidValue
	8,   // 317: sushi_rpc.AudioRoutingController.ConnectOutputChannelFromTrack:output_type -> sushi_rpc.GenericVoidValue
	8,   // 318: sushi_rpc.AudioRoutingController.DisconnectInput:output_type -> sushi_rpc.GenericVoidValue
	8,   // 319: sushi_rpc.AudioRoutingController.DisconnectOutput:output_type -> sushi_rpc.GenericVoidValue
	8,   // 320: sushi_rpc.AudioRoutingController.DisconnectAllInputsFromTrack:output_type -> sushi_rpc.GenericVoidValue
	8,   // 321: sushi_rpc.AudioRoutingController.DisconnectAllOutputFromTrack:output_type -> sushi_rpc.GenericVoidValue
	8,   // 322: sushi_rpc.AudioRoutingController.DisconnectAllOutputsFromTrack:output_type -> sushi_rpc.GenericVoidValue
	10,  // 323: sushi_rpc.CvGateController.GetCvInputChannelCount:output_type -> sushi_rpc.GenericIntValue
	10,  // 324: sushi_rpc.CvGateController.GetCvOutputChannelCount:output_type -> sushi_rpc.GenericIntValue
	66,  // 325: sushi_rpc.CvGateController.GetAllCvInputConnections:output_type -> sushi_rpc.CvConnectionList
	66,  // 326: sushi_rpc.CvGateController.GetAllCvOutputConnections:output_type -> sushi_rpc.CvConnectionList
	68,  // 327: sushi_rpc.CvGateController.GetAllGateInputConnections:output_type -> sushi_rpc.GateConnectionList
	68,  // 328: sushi_rpc.CvGateController.GetAllGateOutputConnections:output_type -> sushi_rpc.GateConnectionList
	66,  // 329: sushi_rpc.CvGateController.GetCvInputConnectionsForProcessor:output_type -> sushi_rpc.CvConnectionList
	66,  // 330: sushi_rpc.CvGateController.GetCvOutputConnectionsForProcessor:output_type -> sushi_rpc.CvConnectionList
	68,  // 331: sushi_rpc.CvGateController.GetGateInputConnectionsForProcessor:output_type -> sushi_rpc.GateConnectionList
	68,  // 332: sushi_rpc.CvGateController.GetGateOutputConnectionsForProcessor:output_type -> sushi_rpc.GateConnectionList
	8,   // 333: sushi_rpc.CvGateController.ConnectCvInputToParameter:output_type -> sushi_rpc.GenericVoidValue
	8,   // 334: sushi_rpc.CvGateController.ConnectCvOutputFromParameter:output_type -> sushi_rpc.GenericVoidValue
	8,   // 335: sushi_rpc.CvGateController.ConnectGateInputToProcessor:output_type -> sushi_rpc.GenericVoidValue
	8,   // 336: sushi_rpc.CvGateController.ConnectGateOutputFromProcessor:output_type -> sushi_rpc.GenericVoidValue
	8,   // 337: sushi_rpc.CvGateController.DisconnectCvInput:output_type -> sushi_rpc.GenericVoidValue
	8,   // 338: sushi_rpc.CvGateController.DisconnectCvOutput:output_type -> sushi_rpc.GenericVoidValue
	8,   // 339: sushi_rpc.CvGateController.DisconnectGateInput:output_type -> sushi_rpc.GenericVoidValue
	8,   // 340: sushi_rpc.CvGateController.DisconnectGateOutput:output_type -> sushi_rpc.GenericVoidValue
	8,   // 341: sushi_rpc.CvGateController.DisconnectAllCvInputsFromProcessor:output_type -> sushi_rpc.GenericVoidValue
	8,   // 342: sushi_rpc.CvGateController.DisconnectAllCvOutputsFromProcessor:output_type -> sushi_rpc.GenericVoidValue
	8,   // 343: sushi_rpc.CvGateController.DisconnectAllGateInputsFromProcessor:output_type -> sushi_rpc.GenericVoidValue
	8,   // 344: sushi_rpc.CvGateController.DisconnectAllGateOutputsFromProcessor:output_type -> sushi_rpc.GenericVoidValue
	12,  // 345: sushi_rpc.OscController.GetSendIP:output_type -> sushi_rpc.GenericStringValue
	10,  // 346: sushi_rpc.OscController.GetSendPort:output_type -> sushi_rpc.GenericIntValue
	10,  // 347: sushi_rpc.OscController.GetReceivePort:output_type -> sushi_rpc.GenericIntValue
	76,  // 348: sushi_rpc.OscController.GetEnabledParameterOutputs:output_type -> sushi_rpc.OscParameterOutputList
	8,   // 349: sushi_rpc.OscController.EnableOutputForParameter:output_type -> sushi_rpc.GenericVoidValue
	8,   // 350: sushi_rpc.OscController.DisableOutputForParameter:output_type -> sushi_rpc.GenericVoidValue
	8,   // 351: sushi_rpc.OscController.EnableAllOutput:output_type -> sushi_rpc.GenericVoidValue
	8,   // 352: sushi_rpc.OscController.DisableAllOutput:output_type -> sushi_rpc.GenericVoidValue
	90,  // 353: sushi_rpc.SessionController.SaveSession:output_type -> sushi_rpc.SessionState
	8,   // 354: sushi_rpc.SessionController.RestoreSession:output_type -> sushi_rpc.GenericVoidValue
	77,  // 355: sushi_rpc.NotificationController.SubscribeToTransportChanges:output_type -> sushi_rpc.TransportUpdate
	24,  // 356: sushi_rpc.NotificationController.SubscribeToEngineCpuTimingUpdates:output_type -> sushi_rpc.CpuTimings
	78,  // 357: sushi_rpc.NotificationController.SubscribeToTrackChanges:output_type -> sushi_rpc.TrackUpdate
	79,  // 358: sushi_rpc.NotificationController.SubscribeToProcessorChanges:output_type -> sushi_rpc.ProcessorUpdate
	46,  // 359: sushi_rpc.NotificationController.SubscribeToParameterUpdates:output_type -> sushi_rpc.ParameterUpdate
	49,  // 360: sushi_rpc.NotificationController.SubscribeToPropertyUpdates:output_type -> sushi_rpc.PropertyValue
	227, // [227:361] is the sub-list for method output_type
	93,  // [93:227] is the sub-list for method input_type
	93,  // [93:93] is the sub-list for extension type_name
	93,  // [93:93] is the sub-list for extension extendee
	0,   // [0:93] is the sub-list for field type_name
}

func init() { file_sushi_rpc_proto_init() }
func file_sushi_rpc_proto_init() {
	if File_sushi_rpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sushi_rpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericVoidValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericFloatValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericIntValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericBoolValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericStringValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionalBoolValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionalIntValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SushiBuildInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessorIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayingMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CpuTimings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoteOnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoteOffRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoteAftertouchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoteModulationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackInfoList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessorInfoList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProgramIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessorProgramIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProgramInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProgramInfoList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessorProgramSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessorBypassStateSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessorState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessorStateSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterInfoList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyInfoList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PluginType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessorPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTrackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMultibusTrackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePreTrackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePostTrackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProcessorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveProcessorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProcessorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterNotificationBlocklist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyNotificationBlocklist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MidiChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioConnectionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CvConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CvConnectionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GateConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GateConnectionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MidiKbdConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MidiKbdConnectionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MidiCCConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MidiCCConnectionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MidiPCConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MidiPCConnectionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MidiClockSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OscParameterOutputList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransportUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessorUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MidiKbdConnectionState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MidiCCConnectionState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MidiPCConnectionState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MidiState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OscParameterState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OscState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackAudioConnectionState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EngineState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PluginClass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sushi_rpc_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sushi_rpc_proto_msgTypes[69].OneofWrappers = []interface{}{
		(*TransportUpdate_Tempo)(nil),
		(*TransportUpdate_PlayingMode)(nil),
		(*TransportUpdate_SyncMode)(nil),
		(*TransportUpdate_TimeSignature)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sushi_rpc_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   83,
			NumExtensions: 0,
			NumServices:   13,
		},
		GoTypes:           file_sushi_rpc_proto_goTypes,
		DependencyIndexes: file_sushi_rpc_proto_depIdxs,
		EnumInfos:         file_sushi_rpc_proto_enumTypes,
		MessageInfos:      file_sushi_rpc_proto_msgTypes,
	}.Build()
	File_sushi_rpc_proto = out.File
	file_sushi_rpc_proto_rawDesc = nil
	file_sushi_rpc_proto_goTypes = nil
	file_sushi_rpc_proto_depIdxs = nil
}
